
feather405_st7735screen_1_8_inch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003894  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa0  08003aa0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003aa8  08003aa8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aac  08003aac  00013aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000084  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000789a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000155e  00000000  00000000  000278d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00028e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006b0  00000000  00000000  000295a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e2b3  00000000  00000000  00029c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000085ae  00000000  00000000  00047f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b681c  00000000  00000000  000504b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00106ccd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d5c  00000000  00000000  00106d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a04 	.word	0x08003a04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003a04 	.word	0x08003a04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
 80004d6:	460b      	mov	r3, r1
 80004d8:	80bb      	strh	r3, [r7, #4]
 80004da:	4613      	mov	r3, r2
 80004dc:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	88b9      	ldrh	r1, [r7, #4]
 80004e2:	887a      	ldrh	r2, [r7, #2]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 fdd1 	bl	800208c <ST7735_DrawPixel>
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80004f2:	b590      	push	{r4, r7, lr}
 80004f4:	b085      	sub	sp, #20
 80004f6:	af02      	add	r7, sp, #8
 80004f8:	4604      	mov	r4, r0
 80004fa:	4608      	mov	r0, r1
 80004fc:	4611      	mov	r1, r2
 80004fe:	461a      	mov	r2, r3
 8000500:	4623      	mov	r3, r4
 8000502:	80fb      	strh	r3, [r7, #6]
 8000504:	4603      	mov	r3, r0
 8000506:	80bb      	strh	r3, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	807b      	strh	r3, [r7, #2]
 800050c:	4613      	mov	r3, r2
 800050e:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000510:	88f8      	ldrh	r0, [r7, #6]
 8000512:	88b9      	ldrh	r1, [r7, #4]
 8000514:	887a      	ldrh	r2, [r7, #2]
 8000516:	883c      	ldrh	r4, [r7, #0]
 8000518:	8b3b      	ldrh	r3, [r7, #24]
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	4623      	mov	r3, r4
 800051e:	f001 fdf3 	bl	8002108 <ST7735_FillRectangle>
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bd90      	pop	{r4, r7, pc}

0800052a <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	4603      	mov	r3, r0
 8000532:	80fb      	strh	r3, [r7, #6]
 8000534:	460b      	mov	r3, r1
 8000536:	80bb      	strh	r3, [r7, #4]
 8000538:	4613      	mov	r3, r2
 800053a:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 800053c:	887a      	ldrh	r2, [r7, #2]
 800053e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff ffc0 	bl	80004cc <drawPixel>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b089      	sub	sp, #36	; 0x24
 8000558:	af00      	add	r7, sp, #0
 800055a:	4604      	mov	r4, r0
 800055c:	4608      	mov	r0, r1
 800055e:	4611      	mov	r1, r2
 8000560:	461a      	mov	r2, r3
 8000562:	4623      	mov	r3, r4
 8000564:	80fb      	strh	r3, [r7, #6]
 8000566:	4603      	mov	r3, r0
 8000568:	80bb      	strh	r3, [r7, #4]
 800056a:	460b      	mov	r3, r1
 800056c:	807b      	strh	r3, [r7, #2]
 800056e:	4613      	mov	r3, r2
 8000570:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000572:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000576:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000580:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000584:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800058c:	1acb      	subs	r3, r1, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	bfb8      	it	lt
 8000592:	425b      	neglt	r3, r3
 8000594:	429a      	cmp	r2, r3
 8000596:	bfcc      	ite	gt
 8000598:	2301      	movgt	r3, #1
 800059a:	2300      	movle	r3, #0
 800059c:	b2db      	uxtb	r3, r3
 800059e:	837b      	strh	r3, [r7, #26]
    if (steep) {
 80005a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	833b      	strh	r3, [r7, #24]
 80005ac:	88bb      	ldrh	r3, [r7, #4]
 80005ae:	80fb      	strh	r3, [r7, #6]
 80005b0:	8b3b      	ldrh	r3, [r7, #24]
 80005b2:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80005b4:	887b      	ldrh	r3, [r7, #2]
 80005b6:	82fb      	strh	r3, [r7, #22]
 80005b8:	883b      	ldrh	r3, [r7, #0]
 80005ba:	807b      	strh	r3, [r7, #2]
 80005bc:	8afb      	ldrh	r3, [r7, #22]
 80005be:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80005c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80005c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dd0b      	ble.n	80005e4 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 80005cc:	88fb      	ldrh	r3, [r7, #6]
 80005ce:	82bb      	strh	r3, [r7, #20]
 80005d0:	887b      	ldrh	r3, [r7, #2]
 80005d2:	80fb      	strh	r3, [r7, #6]
 80005d4:	8abb      	ldrh	r3, [r7, #20]
 80005d6:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80005d8:	88bb      	ldrh	r3, [r7, #4]
 80005da:	827b      	strh	r3, [r7, #18]
 80005dc:	883b      	ldrh	r3, [r7, #0]
 80005de:	80bb      	strh	r3, [r7, #4]
 80005e0:	8a7b      	ldrh	r3, [r7, #18]
 80005e2:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80005e4:	887a      	ldrh	r2, [r7, #2]
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 80005ee:	f9b7 2000 	ldrsh.w	r2, [r7]
 80005f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	bfb8      	it	lt
 80005fc:	425b      	neglt	r3, r3
 80005fe:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8000600:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000604:	0fda      	lsrs	r2, r3, #31
 8000606:	4413      	add	r3, r2
 8000608:	105b      	asrs	r3, r3, #1
 800060a:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 800060c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000610:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000614:	429a      	cmp	r2, r3
 8000616:	da02      	bge.n	800061e <writeLine+0xca>
        ystep = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	83bb      	strh	r3, [r7, #28]
 800061c:	e031      	b.n	8000682 <writeLine+0x12e>
    } else {
        ystep = -1;
 800061e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000622:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8000624:	e02d      	b.n	8000682 <writeLine+0x12e>
        if (steep) {
 8000626:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d008      	beq.n	8000640 <writeLine+0xec>
            writePixel(y0, x0, color);
 800062e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000630:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000634:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff76 	bl	800052a <writePixel>
 800063e:	e007      	b.n	8000650 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 8000640:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000642:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ff6d 	bl	800052a <writePixel>
        }
        err -= dy;
 8000650:	8bfa      	ldrh	r2, [r7, #30]
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	b29b      	uxth	r3, r3
 8000658:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 800065a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800065e:	2b00      	cmp	r3, #0
 8000660:	da09      	bge.n	8000676 <writeLine+0x122>
            y0 += ystep;
 8000662:	88ba      	ldrh	r2, [r7, #4]
 8000664:	8bbb      	ldrh	r3, [r7, #28]
 8000666:	4413      	add	r3, r2
 8000668:	b29b      	uxth	r3, r3
 800066a:	80bb      	strh	r3, [r7, #4]
            err += dx;
 800066c:	8bfa      	ldrh	r2, [r7, #30]
 800066e:	8a3b      	ldrh	r3, [r7, #16]
 8000670:	4413      	add	r3, r2
 8000672:	b29b      	uxth	r3, r3
 8000674:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8000676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067a:	b29b      	uxth	r3, r3
 800067c:	3301      	adds	r3, #1
 800067e:	b29b      	uxth	r3, r3
 8000680:	80fb      	strh	r3, [r7, #6]
 8000682:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000686:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800068a:	429a      	cmp	r2, r3
 800068c:	ddcb      	ble.n	8000626 <writeLine+0xd2>
        }
    }
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3724      	adds	r7, #36	; 0x24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd90      	pop	{r4, r7, pc}

08000698 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b085      	sub	sp, #20
 800069c:	af02      	add	r7, sp, #8
 800069e:	4604      	mov	r4, r0
 80006a0:	4608      	mov	r0, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	461a      	mov	r2, r3
 80006a6:	4623      	mov	r3, r4
 80006a8:	80fb      	strh	r3, [r7, #6]
 80006aa:	4603      	mov	r3, r0
 80006ac:	80bb      	strh	r3, [r7, #4]
 80006ae:	460b      	mov	r3, r1
 80006b0:	807b      	strh	r3, [r7, #2]
 80006b2:	4613      	mov	r3, r2
 80006b4:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 80006b6:	88ba      	ldrh	r2, [r7, #4]
 80006b8:	887b      	ldrh	r3, [r7, #2]
 80006ba:	4413      	add	r3, r2
 80006bc:	b29b      	uxth	r3, r3
 80006be:	3b01      	subs	r3, #1
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	b21c      	sxth	r4, r3
 80006c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80006cc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80006d0:	883b      	ldrh	r3, [r7, #0]
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	4623      	mov	r3, r4
 80006d6:	f7ff ff3d 	bl	8000554 <writeLine>
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd90      	pop	{r4, r7, pc}

080006e2 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80006e2:	b590      	push	{r4, r7, lr}
 80006e4:	b085      	sub	sp, #20
 80006e6:	af02      	add	r7, sp, #8
 80006e8:	4604      	mov	r4, r0
 80006ea:	4608      	mov	r0, r1
 80006ec:	4611      	mov	r1, r2
 80006ee:	461a      	mov	r2, r3
 80006f0:	4623      	mov	r3, r4
 80006f2:	80fb      	strh	r3, [r7, #6]
 80006f4:	4603      	mov	r3, r0
 80006f6:	80bb      	strh	r3, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	807b      	strh	r3, [r7, #2]
 80006fc:	4613      	mov	r3, r2
 80006fe:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8000700:	88fa      	ldrh	r2, [r7, #6]
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	4413      	add	r3, r2
 8000706:	b29b      	uxth	r3, r3
 8000708:	3b01      	subs	r3, #1
 800070a:	b29b      	uxth	r3, r3
 800070c:	b21a      	sxth	r2, r3
 800070e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000712:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000716:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800071a:	883b      	ldrh	r3, [r7, #0]
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	4623      	mov	r3, r4
 8000720:	f7ff ff18 	bl	8000554 <writeLine>
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b087      	sub	sp, #28
 8000730:	af02      	add	r7, sp, #8
 8000732:	4604      	mov	r4, r0
 8000734:	4608      	mov	r0, r1
 8000736:	4611      	mov	r1, r2
 8000738:	461a      	mov	r2, r3
 800073a:	4623      	mov	r3, r4
 800073c:	80fb      	strh	r3, [r7, #6]
 800073e:	4603      	mov	r3, r0
 8000740:	80bb      	strh	r3, [r7, #4]
 8000742:	460b      	mov	r3, r1
 8000744:	807b      	strh	r3, [r7, #2]
 8000746:	4613      	mov	r3, r2
 8000748:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 800074a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800074e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000752:	429a      	cmp	r2, r3
 8000754:	d11a      	bne.n	800078c <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8000756:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800075a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800075e:	429a      	cmp	r2, r3
 8000760:	dd05      	ble.n	800076e <drawLine+0x42>
 8000762:	88bb      	ldrh	r3, [r7, #4]
 8000764:	81bb      	strh	r3, [r7, #12]
 8000766:	883b      	ldrh	r3, [r7, #0]
 8000768:	80bb      	strh	r3, [r7, #4]
 800076a:	89bb      	ldrh	r3, [r7, #12]
 800076c:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800076e:	883a      	ldrh	r2, [r7, #0]
 8000770:	88bb      	ldrh	r3, [r7, #4]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	3301      	adds	r3, #1
 8000778:	b29b      	uxth	r3, r3
 800077a:	b21a      	sxth	r2, r3
 800077c:	8c3b      	ldrh	r3, [r7, #32]
 800077e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000782:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000786:	f7ff ff87 	bl	8000698 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 800078a:	e02d      	b.n	80007e8 <drawLine+0xbc>
    } else if(y0 == y1){
 800078c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000790:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000794:	429a      	cmp	r2, r3
 8000796:	d11a      	bne.n	80007ce <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8000798:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800079c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	dd05      	ble.n	80007b0 <drawLine+0x84>
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	81fb      	strh	r3, [r7, #14]
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80007b0:	887a      	ldrh	r2, [r7, #2]
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	3301      	adds	r3, #1
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	b21a      	sxth	r2, r3
 80007be:	8c3b      	ldrh	r3, [r7, #32]
 80007c0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007c4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007c8:	f7ff ff8b 	bl	80006e2 <drawFastHLine>
}
 80007cc:	e00c      	b.n	80007e8 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 80007ce:	f9b7 4000 	ldrsh.w	r4, [r7]
 80007d2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80007d6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007da:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007de:	8c3b      	ldrh	r3, [r7, #32]
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	4623      	mov	r3, r4
 80007e4:	f7ff feb6 	bl	8000554 <writeLine>
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4604      	mov	r4, r0
 80007f8:	4608      	mov	r0, r1
 80007fa:	4611      	mov	r1, r2
 80007fc:	461a      	mov	r2, r3
 80007fe:	4623      	mov	r3, r4
 8000800:	80fb      	strh	r3, [r7, #6]
 8000802:	4603      	mov	r3, r0
 8000804:	80bb      	strh	r3, [r7, #4]
 8000806:	460b      	mov	r3, r1
 8000808:	807b      	strh	r3, [r7, #2]
 800080a:	4613      	mov	r3, r2
 800080c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800080e:	887b      	ldrh	r3, [r7, #2]
 8000810:	f1c3 0301 	rsb	r3, r3, #1
 8000814:	b29b      	uxth	r3, r3
 8000816:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	461a      	mov	r2, r3
 8000820:	03d2      	lsls	r2, r2, #15
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	b29b      	uxth	r3, r3
 8000828:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	81fb      	strh	r3, [r7, #14]

    writePixel(x0  , y0+r, color);
 8000832:	88ba      	ldrh	r2, [r7, #4]
 8000834:	887b      	ldrh	r3, [r7, #2]
 8000836:	4413      	add	r3, r2
 8000838:	b29b      	uxth	r3, r3
 800083a:	b219      	sxth	r1, r3
 800083c:	883a      	ldrh	r2, [r7, #0]
 800083e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fe71 	bl	800052a <writePixel>
    writePixel(x0  , y0-r, color);
 8000848:	88ba      	ldrh	r2, [r7, #4]
 800084a:	887b      	ldrh	r3, [r7, #2]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	b29b      	uxth	r3, r3
 8000850:	b219      	sxth	r1, r3
 8000852:	883a      	ldrh	r2, [r7, #0]
 8000854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe66 	bl	800052a <writePixel>
    writePixel(x0+r, y0  , color);
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	4413      	add	r3, r2
 8000864:	b29b      	uxth	r3, r3
 8000866:	b21b      	sxth	r3, r3
 8000868:	883a      	ldrh	r2, [r7, #0]
 800086a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fe5b 	bl	800052a <writePixel>
    writePixel(x0-r, y0  , color);
 8000874:	88fa      	ldrh	r2, [r7, #6]
 8000876:	887b      	ldrh	r3, [r7, #2]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	b29b      	uxth	r3, r3
 800087c:	b21b      	sxth	r3, r3
 800087e:	883a      	ldrh	r2, [r7, #0]
 8000880:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe50 	bl	800052a <writePixel>

    while (x<y) {
 800088a:	e091      	b.n	80009b0 <drawCircle+0x1c0>
        if (f >= 0) {
 800088c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db0e      	blt.n	80008b2 <drawCircle+0xc2>
            y--;
 8000894:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000898:	b29b      	uxth	r3, r3
 800089a:	3b01      	subs	r3, #1
 800089c:	b29b      	uxth	r3, r3
 800089e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80008a0:	8a7b      	ldrh	r3, [r7, #18]
 80008a2:	3302      	adds	r3, #2
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80008a8:	8afa      	ldrh	r2, [r7, #22]
 80008aa:	8a7b      	ldrh	r3, [r7, #18]
 80008ac:	4413      	add	r3, r2
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80008b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	3301      	adds	r3, #1
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80008be:	8abb      	ldrh	r3, [r7, #20]
 80008c0:	3302      	adds	r3, #2
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80008c6:	8afa      	ldrh	r2, [r7, #22]
 80008c8:	8abb      	ldrh	r3, [r7, #20]
 80008ca:	4413      	add	r3, r2
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	82fb      	strh	r3, [r7, #22]

        writePixel(x0 + x, y0 + y, color);
 80008d0:	88fa      	ldrh	r2, [r7, #6]
 80008d2:	8a3b      	ldrh	r3, [r7, #16]
 80008d4:	4413      	add	r3, r2
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	b218      	sxth	r0, r3
 80008da:	88ba      	ldrh	r2, [r7, #4]
 80008dc:	89fb      	ldrh	r3, [r7, #14]
 80008de:	4413      	add	r3, r2
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	883a      	ldrh	r2, [r7, #0]
 80008e6:	4619      	mov	r1, r3
 80008e8:	f7ff fe1f 	bl	800052a <writePixel>
        writePixel(x0 - x, y0 + y, color);
 80008ec:	88fa      	ldrh	r2, [r7, #6]
 80008ee:	8a3b      	ldrh	r3, [r7, #16]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	b218      	sxth	r0, r3
 80008f6:	88ba      	ldrh	r2, [r7, #4]
 80008f8:	89fb      	ldrh	r3, [r7, #14]
 80008fa:	4413      	add	r3, r2
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b21b      	sxth	r3, r3
 8000900:	883a      	ldrh	r2, [r7, #0]
 8000902:	4619      	mov	r1, r3
 8000904:	f7ff fe11 	bl	800052a <writePixel>
        writePixel(x0 + x, y0 - y, color);
 8000908:	88fa      	ldrh	r2, [r7, #6]
 800090a:	8a3b      	ldrh	r3, [r7, #16]
 800090c:	4413      	add	r3, r2
 800090e:	b29b      	uxth	r3, r3
 8000910:	b218      	sxth	r0, r3
 8000912:	88ba      	ldrh	r2, [r7, #4]
 8000914:	89fb      	ldrh	r3, [r7, #14]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	b29b      	uxth	r3, r3
 800091a:	b21b      	sxth	r3, r3
 800091c:	883a      	ldrh	r2, [r7, #0]
 800091e:	4619      	mov	r1, r3
 8000920:	f7ff fe03 	bl	800052a <writePixel>
        writePixel(x0 - x, y0 - y, color);
 8000924:	88fa      	ldrh	r2, [r7, #6]
 8000926:	8a3b      	ldrh	r3, [r7, #16]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	b29b      	uxth	r3, r3
 800092c:	b218      	sxth	r0, r3
 800092e:	88ba      	ldrh	r2, [r7, #4]
 8000930:	89fb      	ldrh	r3, [r7, #14]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	b29b      	uxth	r3, r3
 8000936:	b21b      	sxth	r3, r3
 8000938:	883a      	ldrh	r2, [r7, #0]
 800093a:	4619      	mov	r1, r3
 800093c:	f7ff fdf5 	bl	800052a <writePixel>
        writePixel(x0 + y, y0 + x, color);
 8000940:	88fa      	ldrh	r2, [r7, #6]
 8000942:	89fb      	ldrh	r3, [r7, #14]
 8000944:	4413      	add	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	b218      	sxth	r0, r3
 800094a:	88ba      	ldrh	r2, [r7, #4]
 800094c:	8a3b      	ldrh	r3, [r7, #16]
 800094e:	4413      	add	r3, r2
 8000950:	b29b      	uxth	r3, r3
 8000952:	b21b      	sxth	r3, r3
 8000954:	883a      	ldrh	r2, [r7, #0]
 8000956:	4619      	mov	r1, r3
 8000958:	f7ff fde7 	bl	800052a <writePixel>
        writePixel(x0 - y, y0 + x, color);
 800095c:	88fa      	ldrh	r2, [r7, #6]
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	b29b      	uxth	r3, r3
 8000964:	b218      	sxth	r0, r3
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	8a3b      	ldrh	r3, [r7, #16]
 800096a:	4413      	add	r3, r2
 800096c:	b29b      	uxth	r3, r3
 800096e:	b21b      	sxth	r3, r3
 8000970:	883a      	ldrh	r2, [r7, #0]
 8000972:	4619      	mov	r1, r3
 8000974:	f7ff fdd9 	bl	800052a <writePixel>
        writePixel(x0 + y, y0 - x, color);
 8000978:	88fa      	ldrh	r2, [r7, #6]
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	4413      	add	r3, r2
 800097e:	b29b      	uxth	r3, r3
 8000980:	b218      	sxth	r0, r3
 8000982:	88ba      	ldrh	r2, [r7, #4]
 8000984:	8a3b      	ldrh	r3, [r7, #16]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	b29b      	uxth	r3, r3
 800098a:	b21b      	sxth	r3, r3
 800098c:	883a      	ldrh	r2, [r7, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	f7ff fdcb 	bl	800052a <writePixel>
        writePixel(x0 - y, y0 - x, color);
 8000994:	88fa      	ldrh	r2, [r7, #6]
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	b29b      	uxth	r3, r3
 800099c:	b218      	sxth	r0, r3
 800099e:	88ba      	ldrh	r2, [r7, #4]
 80009a0:	8a3b      	ldrh	r3, [r7, #16]
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	883a      	ldrh	r2, [r7, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	f7ff fdbd 	bl	800052a <writePixel>
    while (x<y) {
 80009b0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80009b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	f6ff af67 	blt.w	800088c <drawCircle+0x9c>
    }
}
 80009be:	bf00      	nop
 80009c0:	bf00      	nop
 80009c2:	371c      	adds	r7, #28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd90      	pop	{r4, r7, pc}

080009c8 <drawCircleHelper>:

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b087      	sub	sp, #28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4604      	mov	r4, r0
 80009d0:	4608      	mov	r0, r1
 80009d2:	4611      	mov	r1, r2
 80009d4:	461a      	mov	r2, r3
 80009d6:	4623      	mov	r3, r4
 80009d8:	80fb      	strh	r3, [r7, #6]
 80009da:	4603      	mov	r3, r0
 80009dc:	80bb      	strh	r3, [r7, #4]
 80009de:	460b      	mov	r3, r1
 80009e0:	807b      	strh	r3, [r7, #2]
 80009e2:	4613      	mov	r3, r2
 80009e4:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 80009e6:	887b      	ldrh	r3, [r7, #2]
 80009e8:	f1c3 0301 	rsb	r3, r3, #1
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80009f4:	887b      	ldrh	r3, [r7, #2]
 80009f6:	461a      	mov	r2, r3
 80009f8:	03d2      	lsls	r2, r2, #15
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000a06:	887b      	ldrh	r3, [r7, #2]
 8000a08:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8000a0a:	e0a5      	b.n	8000b58 <drawCircleHelper+0x190>
        if (f >= 0) {
 8000a0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0e      	blt.n	8000a32 <drawCircleHelper+0x6a>
            y--;
 8000a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000a20:	8a7b      	ldrh	r3, [r7, #18]
 8000a22:	3302      	adds	r3, #2
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000a28:	8afa      	ldrh	r2, [r7, #22]
 8000a2a:	8a7b      	ldrh	r3, [r7, #18]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000a32:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000a3e:	8abb      	ldrh	r3, [r7, #20]
 8000a40:	3302      	adds	r3, #2
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000a46:	8afa      	ldrh	r2, [r7, #22]
 8000a48:	8abb      	ldrh	r3, [r7, #20]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8000a50:	787b      	ldrb	r3, [r7, #1]
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d01b      	beq.n	8000a92 <drawCircleHelper+0xca>
            writePixel(x0 + x, y0 + y, color);
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	8a3b      	ldrh	r3, [r7, #16]
 8000a5e:	4413      	add	r3, r2
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	b218      	sxth	r0, r3
 8000a64:	88ba      	ldrh	r2, [r7, #4]
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	4413      	add	r3, r2
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000a70:	4619      	mov	r1, r3
 8000a72:	f7ff fd5a 	bl	800052a <writePixel>
            writePixel(x0 + y, y0 + x, color);
 8000a76:	88fa      	ldrh	r2, [r7, #6]
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	b218      	sxth	r0, r3
 8000a80:	88ba      	ldrh	r2, [r7, #4]
 8000a82:	8a3b      	ldrh	r3, [r7, #16]
 8000a84:	4413      	add	r3, r2
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f7ff fd4c 	bl	800052a <writePixel>
        }
        if (cornername & 0x2) {
 8000a92:	787b      	ldrb	r3, [r7, #1]
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d01b      	beq.n	8000ad4 <drawCircleHelper+0x10c>
            writePixel(x0 + x, y0 - y, color);
 8000a9c:	88fa      	ldrh	r2, [r7, #6]
 8000a9e:	8a3b      	ldrh	r3, [r7, #16]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	b218      	sxth	r0, r3
 8000aa6:	88ba      	ldrh	r2, [r7, #4]
 8000aa8:	89fb      	ldrh	r3, [r7, #14]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f7ff fd39 	bl	800052a <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8000ab8:	88fa      	ldrh	r2, [r7, #6]
 8000aba:	89fb      	ldrh	r3, [r7, #14]
 8000abc:	4413      	add	r3, r2
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b218      	sxth	r0, r3
 8000ac2:	88ba      	ldrh	r2, [r7, #4]
 8000ac4:	8a3b      	ldrh	r3, [r7, #16]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f7ff fd2b 	bl	800052a <writePixel>
        }
        if (cornername & 0x8) {
 8000ad4:	787b      	ldrb	r3, [r7, #1]
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d01b      	beq.n	8000b16 <drawCircleHelper+0x14e>
            writePixel(x0 - y, y0 + x, color);
 8000ade:	88fa      	ldrh	r2, [r7, #6]
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b218      	sxth	r0, r3
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	8a3b      	ldrh	r3, [r7, #16]
 8000aec:	4413      	add	r3, r2
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000af4:	4619      	mov	r1, r3
 8000af6:	f7ff fd18 	bl	800052a <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8000afa:	88fa      	ldrh	r2, [r7, #6]
 8000afc:	8a3b      	ldrh	r3, [r7, #16]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b218      	sxth	r0, r3
 8000b04:	88ba      	ldrh	r2, [r7, #4]
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	4413      	add	r3, r2
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b10:	4619      	mov	r1, r3
 8000b12:	f7ff fd0a 	bl	800052a <writePixel>
        }
        if (cornername & 0x1) {
 8000b16:	787b      	ldrb	r3, [r7, #1]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d01b      	beq.n	8000b58 <drawCircleHelper+0x190>
            writePixel(x0 - y, y0 - x, color);
 8000b20:	88fa      	ldrh	r2, [r7, #6]
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b218      	sxth	r0, r3
 8000b2a:	88ba      	ldrh	r2, [r7, #4]
 8000b2c:	8a3b      	ldrh	r3, [r7, #16]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b36:	4619      	mov	r1, r3
 8000b38:	f7ff fcf7 	bl	800052a <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8000b3c:	88fa      	ldrh	r2, [r7, #6]
 8000b3e:	8a3b      	ldrh	r3, [r7, #16]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b218      	sxth	r0, r3
 8000b46:	88ba      	ldrh	r2, [r7, #4]
 8000b48:	89fb      	ldrh	r3, [r7, #14]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b52:	4619      	mov	r1, r3
 8000b54:	f7ff fce9 	bl	800052a <writePixel>
    while (x<y) {
 8000b58:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	f6ff af53 	blt.w	8000a0c <drawCircleHelper+0x44>
        }
    }
}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	371c      	adds	r7, #28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd90      	pop	{r4, r7, pc}

08000b70 <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4604      	mov	r4, r0
 8000b78:	4608      	mov	r0, r1
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4623      	mov	r3, r4
 8000b80:	80fb      	strh	r3, [r7, #6]
 8000b82:	4603      	mov	r3, r0
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	807b      	strh	r3, [r7, #2]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 8000b8e:	887b      	ldrh	r3, [r7, #2]
 8000b90:	f1c3 0301 	rsb	r3, r3, #1
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	03d2      	lsls	r2, r2, #15
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 8000bb2:	8a3b      	ldrh	r3, [r7, #16]
 8000bb4:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 8000bba:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 8000bc6:	e095      	b.n	8000cf4 <fillCircleHelper+0x184>
        if (f >= 0) {
 8000bc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0e      	blt.n	8000bee <fillCircleHelper+0x7e>
            y--;
 8000bd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000bdc:	8a7b      	ldrh	r3, [r7, #18]
 8000bde:	3302      	adds	r3, #2
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8000be4:	8afa      	ldrh	r2, [r7, #22]
 8000be6:	8a7b      	ldrh	r3, [r7, #18]
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000bee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8000c02:	8afa      	ldrh	r2, [r7, #22]
 8000c04:	8abb      	ldrh	r3, [r7, #20]
 8000c06:	4413      	add	r3, r2
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8000c0c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c10:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	db31      	blt.n	8000c7c <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8000c18:	787b      	ldrb	r3, [r7, #1]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d013      	beq.n	8000c4a <fillCircleHelper+0xda>
 8000c22:	88fa      	ldrh	r2, [r7, #6]
 8000c24:	8a3b      	ldrh	r3, [r7, #16]
 8000c26:	4413      	add	r3, r2
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b218      	sxth	r0, r3
 8000c2c:	88ba      	ldrh	r2, [r7, #4]
 8000c2e:	89fb      	ldrh	r3, [r7, #14]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	b219      	sxth	r1, r3
 8000c36:	89fb      	ldrh	r3, [r7, #14]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c3e:	4413      	add	r3, r2
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	b21a      	sxth	r2, r3
 8000c44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c46:	f7ff fd27 	bl	8000698 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8000c4a:	787b      	ldrb	r3, [r7, #1]
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d013      	beq.n	8000c7c <fillCircleHelper+0x10c>
 8000c54:	88fa      	ldrh	r2, [r7, #6]
 8000c56:	8a3b      	ldrh	r3, [r7, #16]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	b218      	sxth	r0, r3
 8000c5e:	88ba      	ldrh	r2, [r7, #4]
 8000c60:	89fb      	ldrh	r3, [r7, #14]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	b219      	sxth	r1, r3
 8000c68:	89fb      	ldrh	r3, [r7, #14]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c70:	4413      	add	r3, r2
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c78:	f7ff fd0e 	bl	8000698 <drawFastVLine>
        }
        if(y != py) {
 8000c7c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d033      	beq.n	8000cf0 <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8000c88:	787b      	ldrb	r3, [r7, #1]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d013      	beq.n	8000cba <fillCircleHelper+0x14a>
 8000c92:	88fa      	ldrh	r2, [r7, #6]
 8000c94:	897b      	ldrh	r3, [r7, #10]
 8000c96:	4413      	add	r3, r2
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b218      	sxth	r0, r3
 8000c9c:	88ba      	ldrh	r2, [r7, #4]
 8000c9e:	89bb      	ldrh	r3, [r7, #12]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	b219      	sxth	r1, r3
 8000ca6:	89bb      	ldrh	r3, [r7, #12]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cae:	4413      	add	r3, r2
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000cb6:	f7ff fcef 	bl	8000698 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 8000cba:	787b      	ldrb	r3, [r7, #1]
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d013      	beq.n	8000cec <fillCircleHelper+0x17c>
 8000cc4:	88fa      	ldrh	r2, [r7, #6]
 8000cc6:	897b      	ldrh	r3, [r7, #10]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	b218      	sxth	r0, r3
 8000cce:	88ba      	ldrh	r2, [r7, #4]
 8000cd0:	89bb      	ldrh	r3, [r7, #12]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	b219      	sxth	r1, r3
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000ce8:	f7ff fcd6 	bl	8000698 <drawFastVLine>
            py = y;
 8000cec:	89fb      	ldrh	r3, [r7, #14]
 8000cee:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8000cf0:	8a3b      	ldrh	r3, [r7, #16]
 8000cf2:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8000cf4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000cf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f6ff af63 	blt.w	8000bc8 <fillCircleHelper+0x58>
    }
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	371c      	adds	r7, #28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd90      	pop	{r4, r7, pc}

08000d0c <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	4604      	mov	r4, r0
 8000d14:	4608      	mov	r0, r1
 8000d16:	4611      	mov	r1, r2
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4623      	mov	r3, r4
 8000d1c:	80fb      	strh	r3, [r7, #6]
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80bb      	strh	r3, [r7, #4]
 8000d22:	460b      	mov	r3, r1
 8000d24:	807b      	strh	r3, [r7, #2]
 8000d26:	4613      	mov	r3, r2
 8000d28:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 8000d2a:	88ba      	ldrh	r2, [r7, #4]
 8000d2c:	887b      	ldrh	r3, [r7, #2]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	b219      	sxth	r1, r3
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	883b      	ldrh	r3, [r7, #0]
 8000d42:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d46:	f7ff fca7 	bl	8000698 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8000d4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d52:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d56:	883b      	ldrh	r3, [r7, #0]
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2303      	movs	r3, #3
 8000d60:	f7ff ff06 	bl	8000b70 <fillCircleHelper>
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd90      	pop	{r4, r7, pc}

08000d6c <drawRect>:



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	80fb      	strh	r3, [r7, #6]
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80bb      	strh	r3, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	807b      	strh	r3, [r7, #2]
 8000d86:	4613      	mov	r3, r2
 8000d88:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 8000d8a:	8b3b      	ldrh	r3, [r7, #24]
 8000d8c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d90:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d94:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d98:	f7ff fca3 	bl	80006e2 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8000d9c:	88ba      	ldrh	r2, [r7, #4]
 8000d9e:	883b      	ldrh	r3, [r7, #0]
 8000da0:	4413      	add	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	3b01      	subs	r3, #1
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	b219      	sxth	r1, r3
 8000daa:	8b3b      	ldrh	r3, [r7, #24]
 8000dac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000db0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000db4:	f7ff fc95 	bl	80006e2 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8000db8:	8b3b      	ldrh	r3, [r7, #24]
 8000dba:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000dbe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000dc2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000dc6:	f7ff fc67 	bl	8000698 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8000dca:	88fa      	ldrh	r2, [r7, #6]
 8000dcc:	887b      	ldrh	r3, [r7, #2]
 8000dce:	4413      	add	r3, r2
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	b218      	sxth	r0, r3
 8000dd8:	8b3b      	ldrh	r3, [r7, #24]
 8000dda:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000dde:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000de2:	f7ff fc59 	bl	8000698 <drawFastVLine>
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd90      	pop	{r4, r7, pc}

08000dee <drawRoundRect>:

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000dee:	b590      	push	{r4, r7, lr}
 8000df0:	b087      	sub	sp, #28
 8000df2:	af02      	add	r7, sp, #8
 8000df4:	4604      	mov	r4, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4611      	mov	r1, r2
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	80fb      	strh	r3, [r7, #6]
 8000e00:	4603      	mov	r3, r0
 8000e02:	80bb      	strh	r3, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000e0c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e14:	4293      	cmp	r3, r2
 8000e16:	bfa8      	it	ge
 8000e18:	4613      	movge	r3, r2
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	0fda      	lsrs	r2, r3, #31
 8000e1e:	4413      	add	r3, r2
 8000e20:	105b      	asrs	r3, r3, #1
 8000e22:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8000e24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dd01      	ble.n	8000e34 <drawRoundRect+0x46>
 8000e30:	89fb      	ldrh	r3, [r7, #14]
 8000e32:	843b      	strh	r3, [r7, #32]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 8000e34:	88fa      	ldrh	r2, [r7, #6]
 8000e36:	8c3b      	ldrh	r3, [r7, #32]
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	b218      	sxth	r0, r3
 8000e3e:	887a      	ldrh	r2, [r7, #2]
 8000e40:	8c3b      	ldrh	r3, [r7, #32]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e52:	f7ff fc46 	bl	80006e2 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8000e56:	88fa      	ldrh	r2, [r7, #6]
 8000e58:	8c3b      	ldrh	r3, [r7, #32]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b218      	sxth	r0, r3
 8000e60:	88ba      	ldrh	r2, [r7, #4]
 8000e62:	883b      	ldrh	r3, [r7, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b219      	sxth	r1, r3
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	8c3b      	ldrh	r3, [r7, #32]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e7e:	f7ff fc30 	bl	80006e2 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 8000e82:	88ba      	ldrh	r2, [r7, #4]
 8000e84:	8c3b      	ldrh	r3, [r7, #32]
 8000e86:	4413      	add	r3, r2
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	b219      	sxth	r1, r3
 8000e8c:	883a      	ldrh	r2, [r7, #0]
 8000e8e:	8c3b      	ldrh	r3, [r7, #32]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e9c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000ea0:	f7ff fbfa 	bl	8000698 <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8000ea4:	88fa      	ldrh	r2, [r7, #6]
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	3b01      	subs	r3, #1
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	b218      	sxth	r0, r3
 8000eb2:	88ba      	ldrh	r2, [r7, #4]
 8000eb4:	8c3b      	ldrh	r3, [r7, #32]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	b219      	sxth	r1, r3
 8000ebc:	883a      	ldrh	r2, [r7, #0]
 8000ebe:	8c3b      	ldrh	r3, [r7, #32]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ecc:	f7ff fbe4 	bl	8000698 <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8000ed0:	88fa      	ldrh	r2, [r7, #6]
 8000ed2:	8c3b      	ldrh	r3, [r7, #32]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	b218      	sxth	r0, r3
 8000eda:	88ba      	ldrh	r2, [r7, #4]
 8000edc:	8c3b      	ldrh	r3, [r7, #32]
 8000ede:	4413      	add	r3, r2
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b219      	sxth	r1, r3
 8000ee4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2301      	movs	r3, #1
 8000eee:	f7ff fd6b 	bl	80009c8 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8000ef2:	88fa      	ldrh	r2, [r7, #6]
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	8c3b      	ldrh	r3, [r7, #32]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b218      	sxth	r0, r3
 8000f06:	88ba      	ldrh	r2, [r7, #4]
 8000f08:	8c3b      	ldrh	r3, [r7, #32]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	b219      	sxth	r1, r3
 8000f10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f7ff fd55 	bl	80009c8 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8000f1e:	88fa      	ldrh	r2, [r7, #6]
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	4413      	add	r3, r2
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	8c3b      	ldrh	r3, [r7, #32]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	b218      	sxth	r0, r3
 8000f32:	88ba      	ldrh	r2, [r7, #4]
 8000f34:	883b      	ldrh	r3, [r7, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	8c3b      	ldrh	r3, [r7, #32]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3b01      	subs	r3, #1
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	b219      	sxth	r1, r3
 8000f46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2304      	movs	r3, #4
 8000f50:	f7ff fd3a 	bl	80009c8 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8000f54:	88fa      	ldrh	r2, [r7, #6]
 8000f56:	8c3b      	ldrh	r3, [r7, #32]
 8000f58:	4413      	add	r3, r2
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	b218      	sxth	r0, r3
 8000f5e:	88ba      	ldrh	r2, [r7, #4]
 8000f60:	883b      	ldrh	r3, [r7, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	8c3b      	ldrh	r3, [r7, #32]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	b219      	sxth	r1, r3
 8000f72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	f7ff fd24 	bl	80009c8 <drawCircleHelper>
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}

08000f88 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	4604      	mov	r4, r0
 8000f90:	4608      	mov	r0, r1
 8000f92:	4611      	mov	r1, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	4623      	mov	r3, r4
 8000f98:	80fb      	strh	r3, [r7, #6]
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80bb      	strh	r3, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	807b      	strh	r3, [r7, #2]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000fa6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000faa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	bfa8      	it	ge
 8000fb2:	4613      	movge	r3, r2
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	0fda      	lsrs	r2, r3, #31
 8000fb8:	4413      	add	r3, r2
 8000fba:	105b      	asrs	r3, r3, #1
 8000fbc:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8000fbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	dd01      	ble.n	8000fce <fillRoundRect+0x46>
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	843b      	strh	r3, [r7, #32]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 8000fce:	88fa      	ldrh	r2, [r7, #6]
 8000fd0:	8c3b      	ldrh	r3, [r7, #32]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b218      	sxth	r0, r3
 8000fd8:	887a      	ldrh	r2, [r7, #2]
 8000fda:	8c3b      	ldrh	r3, [r7, #32]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000fea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	f7ff fa7d 	bl	80004f2 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8000ff8:	88fa      	ldrh	r2, [r7, #6]
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	8c3b      	ldrh	r3, [r7, #32]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	b29b      	uxth	r3, r3
 8001006:	3b01      	subs	r3, #1
 8001008:	b29b      	uxth	r3, r3
 800100a:	b218      	sxth	r0, r3
 800100c:	88ba      	ldrh	r2, [r7, #4]
 800100e:	8c3b      	ldrh	r3, [r7, #32]
 8001010:	4413      	add	r3, r2
 8001012:	b29b      	uxth	r3, r3
 8001014:	b219      	sxth	r1, r3
 8001016:	883a      	ldrh	r2, [r7, #0]
 8001018:	8c3b      	ldrh	r3, [r7, #32]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	b29b      	uxth	r3, r3
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	b29b      	uxth	r3, r3
 8001022:	3b01      	subs	r3, #1
 8001024:	b29b      	uxth	r3, r3
 8001026:	b21b      	sxth	r3, r3
 8001028:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800102c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800102e:	9201      	str	r2, [sp, #4]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	4622      	mov	r2, r4
 8001036:	f7ff fd9b 	bl	8000b70 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800103a:	88fa      	ldrh	r2, [r7, #6]
 800103c:	8c3b      	ldrh	r3, [r7, #32]
 800103e:	4413      	add	r3, r2
 8001040:	b29b      	uxth	r3, r3
 8001042:	b218      	sxth	r0, r3
 8001044:	88ba      	ldrh	r2, [r7, #4]
 8001046:	8c3b      	ldrh	r3, [r7, #32]
 8001048:	4413      	add	r3, r2
 800104a:	b29b      	uxth	r3, r3
 800104c:	b219      	sxth	r1, r3
 800104e:	883a      	ldrh	r2, [r7, #0]
 8001050:	8c3b      	ldrh	r3, [r7, #32]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	b29b      	uxth	r3, r3
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	b29b      	uxth	r3, r3
 800105a:	3b01      	subs	r3, #1
 800105c:	b29b      	uxth	r3, r3
 800105e:	b21b      	sxth	r3, r3
 8001060:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001064:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001066:	9201      	str	r2, [sp, #4]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2302      	movs	r3, #2
 800106c:	4622      	mov	r2, r4
 800106e:	f7ff fd7f 	bl	8000b70 <fillCircleHelper>
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bd90      	pop	{r4, r7, pc}

0800107a <drawTriangle>:


void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800107a:	b590      	push	{r4, r7, lr}
 800107c:	b085      	sub	sp, #20
 800107e:	af02      	add	r7, sp, #8
 8001080:	4604      	mov	r4, r0
 8001082:	4608      	mov	r0, r1
 8001084:	4611      	mov	r1, r2
 8001086:	461a      	mov	r2, r3
 8001088:	4623      	mov	r3, r4
 800108a:	80fb      	strh	r3, [r7, #6]
 800108c:	4603      	mov	r3, r0
 800108e:	80bb      	strh	r3, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	803b      	strh	r3, [r7, #0]
    drawLine(x0, y0, x1, y1, color);
 8001098:	f9b7 4000 	ldrsh.w	r4, [r7]
 800109c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80010a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010a4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80010a8:	8c3b      	ldrh	r3, [r7, #32]
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	4623      	mov	r3, r4
 80010ae:	f7ff fb3d 	bl	800072c <drawLine>
    drawLine(x1, y1, x2, y2, color);
 80010b2:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80010b6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80010ba:	f9b7 1000 	ldrsh.w	r1, [r7]
 80010be:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80010c2:	8c3b      	ldrh	r3, [r7, #32]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	4623      	mov	r3, r4
 80010c8:	f7ff fb30 	bl	800072c <drawLine>
    drawLine(x2, y2, x0, y0, color);
 80010cc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80010d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010d4:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80010d8:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80010dc:	8c3b      	ldrh	r3, [r7, #32]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4623      	mov	r3, r4
 80010e2:	f7ff fb23 	bl	800072c <drawLine>
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd90      	pop	{r4, r7, pc}

080010ee <fillTriangle>:


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80010ee:	b590      	push	{r4, r7, lr}
 80010f0:	b08f      	sub	sp, #60	; 0x3c
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4604      	mov	r4, r0
 80010f6:	4608      	mov	r0, r1
 80010f8:	4611      	mov	r1, r2
 80010fa:	461a      	mov	r2, r3
 80010fc:	4623      	mov	r3, r4
 80010fe:	80fb      	strh	r3, [r7, #6]
 8001100:	4603      	mov	r3, r0
 8001102:	80bb      	strh	r3, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800110c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001110:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001114:	429a      	cmp	r2, r3
 8001116:	dd0b      	ble.n	8001130 <fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8001118:	88bb      	ldrh	r3, [r7, #4]
 800111a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800111c:	883b      	ldrh	r3, [r7, #0]
 800111e:	80bb      	strh	r3, [r7, #4]
 8001120:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001122:	803b      	strh	r3, [r7, #0]
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	80fb      	strh	r3, [r7, #6]
 800112c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800112e:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8001130:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001134:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001138:	429a      	cmp	r2, r3
 800113a:	dd0f      	ble.n	800115c <fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800113c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001140:	847b      	strh	r3, [r7, #34]	; 0x22
 8001142:	883b      	ldrh	r3, [r7, #0]
 8001144:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800114a:	803b      	strh	r3, [r7, #0]
 800114c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001150:	843b      	strh	r3, [r7, #32]
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001158:	8c3b      	ldrh	r3, [r7, #32]
 800115a:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 800115c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001160:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001164:	429a      	cmp	r2, r3
 8001166:	dd0b      	ble.n	8001180 <fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	83fb      	strh	r3, [r7, #30]
 800116c:	883b      	ldrh	r3, [r7, #0]
 800116e:	80bb      	strh	r3, [r7, #4]
 8001170:	8bfb      	ldrh	r3, [r7, #30]
 8001172:	803b      	strh	r3, [r7, #0]
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	83bb      	strh	r3, [r7, #28]
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	80fb      	strh	r3, [r7, #6]
 800117c:	8bbb      	ldrh	r3, [r7, #28]
 800117e:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8001180:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001184:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001188:	429a      	cmp	r2, r3
 800118a:	d137      	bne.n	80011fc <fillTriangle+0x10e>
        a = b = x0;
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001190:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001192:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8001194:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001198:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800119c:	429a      	cmp	r2, r3
 800119e:	da02      	bge.n	80011a6 <fillTriangle+0xb8>
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80011a4:	e007      	b.n	80011b6 <fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 80011a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80011aa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80011ae:	429a      	cmp	r2, r3
 80011b0:	dd01      	ble.n	80011b6 <fillTriangle+0xc8>
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80011b6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80011ba:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80011be:	429a      	cmp	r2, r3
 80011c0:	da03      	bge.n	80011ca <fillTriangle+0xdc>
 80011c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80011c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80011c8:	e008      	b.n	80011dc <fillTriangle+0xee>
        else if(x2 > b) b = x2;
 80011ca:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80011ce:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dd02      	ble.n	80011dc <fillTriangle+0xee>
 80011d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80011da:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y0, b-a+1, color);
 80011dc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80011de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	3301      	adds	r3, #1
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80011ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011f2:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80011f6:	f7ff fa74 	bl	80006e2 <drawFastHLine>
        return;
 80011fa:	e0d4      	b.n	80013a6 <fillTriangle+0x2b8>
    }

    int16_t
    dx01 = x1 - x0,
 80011fc:	887a      	ldrh	r2, [r7, #2]
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	b29b      	uxth	r3, r3
 8001204:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8001206:	883a      	ldrh	r2, [r7, #0]
 8001208:	88bb      	ldrh	r3, [r7, #4]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	b29b      	uxth	r3, r3
 800120e:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8001210:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b29b      	uxth	r3, r3
 800121a:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800121c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001220:	88bb      	ldrh	r3, [r7, #4]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b29b      	uxth	r3, r3
 8001226:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8001228:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	b29b      	uxth	r3, r3
 8001232:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8001234:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001238:	883b      	ldrh	r3, [r7, #0]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	b29b      	uxth	r3, r3
 800123e:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8001248:	f9b7 2000 	ldrsh.w	r2, [r7]
 800124c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001250:	429a      	cmp	r2, r3
 8001252:	d102      	bne.n	800125a <fillTriangle+0x16c>
 8001254:	883b      	ldrh	r3, [r7, #0]
 8001256:	863b      	strh	r3, [r7, #48]	; 0x30
 8001258:	e003      	b.n	8001262 <fillTriangle+0x174>
    else         last = y1-1; // Skip it
 800125a:	883b      	ldrh	r3, [r7, #0]
 800125c:	3b01      	subs	r3, #1
 800125e:	b29b      	uxth	r3, r3
 8001260:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	867b      	strh	r3, [r7, #50]	; 0x32
 8001266:	e03e      	b.n	80012e6 <fillTriangle+0x1f8>
        a   = x0 + sa / dy01;
 8001268:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800126c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800126e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001272:	b29a      	uxth	r2, r3
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	4413      	add	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800127c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001282:	fb92 f3f3 	sdiv	r3, r2, r3
 8001286:	b29a      	uxth	r2, r3
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4413      	add	r3, r2
 800128c:	b29b      	uxth	r3, r3
 800128e:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8001290:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001296:	4413      	add	r3, r2
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 800129a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800129e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012a0:	4413      	add	r3, r2
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80012a4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80012a8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dd05      	ble.n	80012bc <fillTriangle+0x1ce>
 80012b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012b2:	81bb      	strh	r3, [r7, #12]
 80012b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012b6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80012b8:	89bb      	ldrh	r3, [r7, #12]
 80012ba:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 80012bc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80012ce:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80012d2:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80012d6:	f7ff fa04 	bl	80006e2 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 80012da:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3301      	adds	r3, #1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	867b      	strh	r3, [r7, #50]	; 0x32
 80012e6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80012ea:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80012ee:	429a      	cmp	r2, r3
 80012f0:	ddba      	ble.n	8001268 <fillTriangle+0x17a>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 80012f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012f6:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80012fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80012fe:	1a8a      	subs	r2, r1, r2
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8001306:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800130a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800130e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001312:	1a8a      	subs	r2, r1, r2
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 800131a:	e03e      	b.n	800139a <fillTriangle+0x2ac>
        a   = x1 + sa / dy12;
 800131c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001322:	fb92 f3f3 	sdiv	r3, r2, r3
 8001326:	b29a      	uxth	r2, r3
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	4413      	add	r3, r2
 800132c:	b29b      	uxth	r3, r3
 800132e:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8001330:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001336:	fb92 f3f3 	sdiv	r3, r2, r3
 800133a:	b29a      	uxth	r2, r3
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	4413      	add	r3, r2
 8001340:	b29b      	uxth	r3, r3
 8001342:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8001344:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800134a:	4413      	add	r3, r2
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 800134e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001354:	4413      	add	r3, r2
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8001358:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800135c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001360:	429a      	cmp	r2, r3
 8001362:	dd05      	ble.n	8001370 <fillTriangle+0x282>
 8001364:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001366:	81fb      	strh	r3, [r7, #14]
 8001368:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800136a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800136c:	89fb      	ldrh	r3, [r7, #14]
 800136e:	86bb      	strh	r3, [r7, #52]	; 0x34
        drawFastHLine(a, y, b-a+1, color);
 8001370:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001372:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	b29b      	uxth	r3, r3
 8001378:	3301      	adds	r3, #1
 800137a:	b29b      	uxth	r3, r3
 800137c:	b21a      	sxth	r2, r3
 800137e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001382:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8001386:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800138a:	f7ff f9aa 	bl	80006e2 <drawFastHLine>
    for(; y<=y2; y++) {
 800138e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001392:	b29b      	uxth	r3, r3
 8001394:	3301      	adds	r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	867b      	strh	r3, [r7, #50]	; 0x32
 800139a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800139e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80013a2:	429a      	cmp	r2, r3
 80013a4:	ddba      	ble.n	800131c <fillTriangle+0x22e>
    }
}
 80013a6:	373c      	adds	r7, #60	; 0x3c
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}

080013ac <fillScreen>:

void fillScreen(uint16_t color) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <fillScreen+0x2c>)
 80013b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <fillScreen+0x30>)
 80013be:	f9b3 1000 	ldrsh.w	r1, [r3]
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	460b      	mov	r3, r1
 80013c8:	2100      	movs	r1, #0
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff f891 	bl	80004f2 <fillRect>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000028 	.word	0x20000028
 80013dc:	2000002a 	.word	0x2000002a

080013e0 <testLines>:



void testLines(uint16_t color)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b08b      	sub	sp, #44	; 0x2c
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 80013ea:	4b7c      	ldr	r3, [pc, #496]	; (80015dc <testLines+0x1fc>)
 80013ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f0:	617b      	str	r3, [r7, #20]
                  h = _height;
 80013f2:	4b7b      	ldr	r3, [pc, #492]	; (80015e0 <testLines+0x200>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff ffd6 	bl	80013ac <fillScreen>

    x1 = y1 = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	3b01      	subs	r3, #1
 800140c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	e00f      	b.n	8001434 <testLines+0x54>
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	b218      	sxth	r0, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	b219      	sxth	r1, r3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	b21a      	sxth	r2, r3
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	b21c      	sxth	r4, r3
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	4623      	mov	r3, r4
 800142a:	f7ff f97f 	bl	800072c <drawLine>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3306      	adds	r3, #6
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	dbeb      	blt.n	8001414 <testLines+0x34>
    x2    = w - 1;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3b01      	subs	r3, #1
 8001440:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	e00f      	b.n	8001468 <testLines+0x88>
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	b218      	sxth	r0, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	b219      	sxth	r1, r3
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	b21a      	sxth	r2, r3
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	b21c      	sxth	r4, r3
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	4623      	mov	r3, r4
 800145e:	f7ff f965 	bl	800072c <drawLine>
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	3306      	adds	r3, #6
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbeb      	blt.n	8001448 <testLines+0x68>

    fillScreen(BLACK);
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff ff9b 	bl	80013ac <fillScreen>

    x1    = w - 1;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3b01      	subs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	3b01      	subs	r3, #1
 8001484:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e00f      	b.n	80014ac <testLines+0xcc>
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	b218      	sxth	r0, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	b219      	sxth	r1, r3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	b21a      	sxth	r2, r3
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	b21c      	sxth	r4, r3
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4623      	mov	r3, r4
 80014a2:	f7ff f943 	bl	800072c <drawLine>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3306      	adds	r3, #6
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbeb      	blt.n	800148c <testLines+0xac>
    x2    = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	e00f      	b.n	80014de <testLines+0xfe>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	b218      	sxth	r0, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	b219      	sxth	r1, r3
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	b21c      	sxth	r4, r3
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4623      	mov	r3, r4
 80014d4:	f7ff f92a 	bl	800072c <drawLine>
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3306      	adds	r3, #6
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dbeb      	blt.n	80014be <testLines+0xde>

    fillScreen(BLACK);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff ff60 	bl	80013ac <fillScreen>

    x1    = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	e00f      	b.n	8001520 <testLines+0x140>
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	b218      	sxth	r0, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	b219      	sxth	r1, r3
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	b21a      	sxth	r2, r3
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	b21c      	sxth	r4, r3
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	4623      	mov	r3, r4
 8001516:	f7ff f909 	bl	800072c <drawLine>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3306      	adds	r3, #6
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbeb      	blt.n	8001500 <testLines+0x120>
    x2    = w - 1;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3b01      	subs	r3, #1
 800152c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	e00f      	b.n	8001554 <testLines+0x174>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	b218      	sxth	r0, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	b219      	sxth	r1, r3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	b21a      	sxth	r2, r3
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	b21c      	sxth	r4, r3
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	4623      	mov	r3, r4
 800154a:	f7ff f8ef 	bl	800072c <drawLine>
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	3306      	adds	r3, #6
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbeb      	blt.n	8001534 <testLines+0x154>

    fillScreen(BLACK);
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff ff25 	bl	80013ac <fillScreen>

    x1    = w - 1;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3b01      	subs	r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3b01      	subs	r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e00f      	b.n	8001598 <testLines+0x1b8>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	b218      	sxth	r0, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	b219      	sxth	r1, r3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	b21a      	sxth	r2, r3
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	b21c      	sxth	r4, r3
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	4623      	mov	r3, r4
 800158e:	f7ff f8cd 	bl	800072c <drawLine>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3306      	adds	r3, #6
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbeb      	blt.n	8001578 <testLines+0x198>
    x2    = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) drawLine(x1, y1, x2, y2, color);
 80015a4:	2300      	movs	r3, #0
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	e00f      	b.n	80015ca <testLines+0x1ea>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	b218      	sxth	r0, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	b219      	sxth	r1, r3
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	b21c      	sxth	r4, r3
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	4623      	mov	r3, r4
 80015c0:	f7ff f8b4 	bl	800072c <drawLine>
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	3306      	adds	r3, #6
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dbeb      	blt.n	80015aa <testLines+0x1ca>

}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	3724      	adds	r7, #36	; 0x24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	20000028 	.word	0x20000028
 80015e0:	2000002a 	.word	0x2000002a

080015e4 <testFastLines>:

void testFastLines(uint16_t color1, uint16_t color2)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	460a      	mov	r2, r1
 80015ee:	80fb      	strh	r3, [r7, #6]
 80015f0:	4613      	mov	r3, r2
 80015f2:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <testFastLines+0x78>)
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <testFastLines+0x7c>)
 80015fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001602:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fed1 	bl	80013ac <fillScreen>
    for (y = 0; y < h; y += 5) drawFastHLine(0, y, w, color1);
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	e00a      	b.n	8001626 <testFastLines+0x42>
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	b219      	sxth	r1, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	b21a      	sxth	r2, r3
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff f861 	bl	80006e2 <drawFastHLine>
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	3305      	adds	r3, #5
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	429a      	cmp	r2, r3
 800162c:	dbf0      	blt.n	8001610 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) drawFastVLine(x, 0, h, color2);
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e00a      	b.n	800164a <testFastLines+0x66>
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	b218      	sxth	r0, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	b21a      	sxth	r2, r3
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	2100      	movs	r1, #0
 8001640:	f7ff f82a 	bl	8000698 <drawFastVLine>
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3305      	adds	r3, #5
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	429a      	cmp	r2, r3
 8001650:	dbf0      	blt.n	8001634 <testFastLines+0x50>
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000028 	.word	0x20000028
 8001660:	2000002a 	.word	0x2000002a

08001664 <testRects>:

void testRects(uint16_t color)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b08b      	sub	sp, #44	; 0x2c
 8001668:	af02      	add	r7, sp, #8
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
    int           n, i, i2,
                  cx = _width  / 2,
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <testRects+0x9c>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	0fda      	lsrs	r2, r3, #31
 8001676:	4413      	add	r3, r2
 8001678:	105b      	asrs	r3, r3, #1
 800167a:	b21b      	sxth	r3, r3
 800167c:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2;
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <testRects+0xa0>)
 8001680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001684:	0fda      	lsrs	r2, r3, #31
 8001686:	4413      	add	r3, r2
 8001688:	105b      	asrs	r3, r3, #1
 800168a:	b21b      	sxth	r3, r3
 800168c:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 800168e:	2000      	movs	r0, #0
 8001690:	f7ff fe8c 	bl	80013ac <fillScreen>
    n     = min(_width, _height);
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <testRects+0xa0>)
 8001696:	f9b3 2000 	ldrsh.w	r2, [r3]
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <testRects+0x9c>)
 800169c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a0:	4293      	cmp	r3, r2
 80016a2:	bfa8      	it	ge
 80016a4:	4613      	movge	r3, r2
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	613b      	str	r3, [r7, #16]
    for (i = 2; i < n; i += 6) {
 80016aa:	2302      	movs	r3, #2
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	e01e      	b.n	80016ee <testRects+0x8a>
        i2 = i / 2;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	0fda      	lsrs	r2, r3, #31
 80016b4:	4413      	add	r3, r2
 80016b6:	105b      	asrs	r3, r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
        drawRect(cx - i2, cy - i2, i, i, color);
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	b218      	sxth	r0, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b219      	sxth	r1, r3
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	b21a      	sxth	r2, r3
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	b21c      	sxth	r4, r3
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4623      	mov	r3, r4
 80016e4:	f7ff fb42 	bl	8000d6c <drawRect>
    for (i = 2; i < n; i += 6) {
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	3306      	adds	r3, #6
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dbdc      	blt.n	80016b0 <testRects+0x4c>
    }

}
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	3724      	adds	r7, #36	; 0x24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	20000028 	.word	0x20000028
 8001704:	2000002a 	.word	0x2000002a

08001708 <testFilledRects>:

void testFilledRects(uint16_t color1, uint16_t color2)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b08b      	sub	sp, #44	; 0x2c
 800170c:	af02      	add	r7, sp, #8
 800170e:	4603      	mov	r3, r0
 8001710:	460a      	mov	r2, r1
 8001712:	80fb      	strh	r3, [r7, #6]
 8001714:	4613      	mov	r3, r2
 8001716:	80bb      	strh	r3, [r7, #4]
    int           n, i, i2,
                  cx = _width  / 2 - 1,
 8001718:	4b30      	ldr	r3, [pc, #192]	; (80017dc <testFilledRects+0xd4>)
 800171a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171e:	0fda      	lsrs	r2, r3, #31
 8001720:	4413      	add	r3, r2
 8001722:	105b      	asrs	r3, r3, #1
 8001724:	b21b      	sxth	r3, r3
 8001726:	3b01      	subs	r3, #1
 8001728:	61bb      	str	r3, [r7, #24]
                  cy = _height / 2 - 1;
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <testFilledRects+0xd8>)
 800172c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001730:	0fda      	lsrs	r2, r3, #31
 8001732:	4413      	add	r3, r2
 8001734:	105b      	asrs	r3, r3, #1
 8001736:	b21b      	sxth	r3, r3
 8001738:	3b01      	subs	r3, #1
 800173a:	617b      	str	r3, [r7, #20]

    fillScreen(BLACK);
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff fe35 	bl	80013ac <fillScreen>
    n = min(_width, _height);
 8001742:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <testFilledRects+0xd8>)
 8001744:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <testFilledRects+0xd4>)
 800174a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174e:	4293      	cmp	r3, r2
 8001750:	bfa8      	it	ge
 8001752:	4613      	movge	r3, r2
 8001754:	b21b      	sxth	r3, r3
 8001756:	613b      	str	r3, [r7, #16]
    for (i = n; i > 0; i -= 6) {
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	e035      	b.n	80017ca <testFilledRects+0xc2>
        i2    = i / 2;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	0fda      	lsrs	r2, r3, #31
 8001762:	4413      	add	r3, r2
 8001764:	105b      	asrs	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]

        fillRect(cx - i2, cy - i2, i, i, color1);
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	b29b      	uxth	r3, r3
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	b29b      	uxth	r3, r3
 8001774:	b218      	sxth	r0, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	b29b      	uxth	r3, r3
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	b219      	sxth	r1, r3
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	b21a      	sxth	r2, r3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	b21c      	sxth	r4, r3
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4623      	mov	r3, r4
 8001792:	f7fe feae 	bl	80004f2 <fillRect>

        drawRect(cx - i2, cy - i2, i, i, color2);
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	b29b      	uxth	r3, r3
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b218      	sxth	r0, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	b219      	sxth	r1, r3
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	b21c      	sxth	r4, r3
 80017ba:	88bb      	ldrh	r3, [r7, #4]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4623      	mov	r3, r4
 80017c0:	f7ff fad4 	bl	8000d6c <drawRect>
    for (i = n; i > 0; i -= 6) {
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	3b06      	subs	r3, #6
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	dcc6      	bgt.n	800175e <testFilledRects+0x56>
    }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd90      	pop	{r4, r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000028 	.word	0x20000028
 80017e0:	2000002a 	.word	0x2000002a

080017e4 <testFilledCircles>:

void testFilledCircles(uint8_t radius, uint16_t color)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	4613      	mov	r3, r2
 80017f2:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <testFilledCircles+0x74>)
 80017f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <testFilledCircles+0x78>)
 80017fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	60fb      	str	r3, [r7, #12]

    fillScreen(BLACK);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fdce 	bl	80013ac <fillScreen>
    for (x = radius; x < w; x += r2) {
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	e017      	b.n	8001846 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	e00c      	b.n	8001836 <testFilledCircles+0x52>
            fillCircle(x, y, radius, color);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	b218      	sxth	r0, r3
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	b219      	sxth	r1, r3
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	b21a      	sxth	r2, r3
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	f7ff fa6f 	bl	8000d0c <fillCircle>
        for (y = radius; y < h; y += r2) {
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	429a      	cmp	r2, r3
 800183c:	dbee      	blt.n	800181c <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	429a      	cmp	r2, r3
 800184c:	dbe3      	blt.n	8001816 <testFilledCircles+0x32>
        }
    }

}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000028 	.word	0x20000028
 800185c:	2000002a 	.word	0x2000002a

08001860 <testCircles>:

void testCircles(uint8_t radius, uint16_t color)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	460a      	mov	r2, r1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	4613      	mov	r3, r2
 800186e:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <testCircles+0x7c>)
 8001878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187c:	461a      	mov	r2, r3
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4413      	add	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <testCircles+0x80>)
 8001886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188a:	461a      	mov	r2, r3
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]

    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	e017      	b.n	80018c8 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	e00c      	b.n	80018b8 <testCircles+0x58>
            drawCircle(x, y, radius, color);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	b218      	sxth	r0, r3
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	b219      	sxth	r1, r3
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	88bb      	ldrh	r3, [r7, #4]
 80018ac:	f7fe ffa0 	bl	80007f0 <drawCircle>
        for (y = 0; y < h; y += r2) {
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	4413      	add	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbee      	blt.n	800189e <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	4413      	add	r3, r2
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbe3      	blt.n	8001898 <testCircles+0x38>
        }
    }

}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000028 	.word	0x20000028
 80018e0:	2000002a 	.word	0x2000002a

080018e4 <testTriangles>:

void testTriangles()
{
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <testTriangles+0xc0>)
 80018ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f0:	0fda      	lsrs	r2, r3, #31
 80018f2:	4413      	add	r3, r2
 80018f4:	105b      	asrs	r3, r3, #1
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	3b01      	subs	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <testTriangles+0xc4>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	0fda      	lsrs	r2, r3, #31
 8001904:	4413      	add	r3, r2
 8001906:	105b      	asrs	r3, r3, #1
 8001908:	b21b      	sxth	r3, r3
 800190a:	3b01      	subs	r3, #1
 800190c:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff fd4c 	bl	80013ac <fillScreen>
    n     = min(cx, cy);
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	4293      	cmp	r3, r2
 800191a:	bfa8      	it	ge
 800191c:	4613      	movge	r3, r2
 800191e:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	e035      	b.n	8001992 <testTriangles+0xae>
        drawTriangle(
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	b29b      	uxth	r3, r3
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	b29b      	uxth	r3, r3
        drawTriangle(
 8001936:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	b29b      	uxth	r3, r3
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	b29b      	uxth	r3, r3
        drawTriangle(
 8001944:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	b29a      	uxth	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	b29b      	uxth	r3, r3
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
        drawTriangle(
 8001952:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	b29b      	uxth	r3, r3
 800195c:	4413      	add	r3, r2
 800195e:	b29b      	uxth	r3, r3
        drawTriangle(
 8001960:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	b291      	uxth	r1, r2
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	b292      	uxth	r2, r2
 800196a:	440a      	add	r2, r1
 800196c:	b292      	uxth	r2, r2
        drawTriangle(
 800196e:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8001970:	68f9      	ldr	r1, [r7, #12]
 8001972:	10c9      	asrs	r1, r1, #3
 8001974:	b289      	uxth	r1, r1
        drawTriangle(
 8001976:	f001 011f 	and.w	r1, r1, #31
 800197a:	b289      	uxth	r1, r1
 800197c:	9102      	str	r1, [sp, #8]
 800197e:	9201      	str	r2, [sp, #4]
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	4633      	mov	r3, r6
 8001984:	462a      	mov	r2, r5
 8001986:	4621      	mov	r1, r4
 8001988:	f7ff fb77 	bl	800107a <drawTriangle>
    for (i = 0; i < n; i += 5) {
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3305      	adds	r3, #5
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	dbc5      	blt.n	8001926 <testTriangles+0x42>
    }

}
 800199a:	bf00      	nop
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a4:	20000028 	.word	0x20000028
 80019a8:	2000002a 	.word	0x2000002a

080019ac <testFilledTriangles>:

void testFilledTriangles() {
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 80019b2:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <testFilledTriangles+0x154>)
 80019b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b8:	0fda      	lsrs	r2, r3, #31
 80019ba:	4413      	add	r3, r2
 80019bc:	105b      	asrs	r3, r3, #1
 80019be:	b21b      	sxth	r3, r3
 80019c0:	3b01      	subs	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <testFilledTriangles+0x158>)
 80019c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ca:	0fda      	lsrs	r2, r3, #31
 80019cc:	4413      	add	r3, r2
 80019ce:	105b      	asrs	r3, r3, #1
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	3b01      	subs	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]

    fillScreen(BLACK);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f7ff fce8 	bl	80013ac <fillScreen>
    for (i = min(cx, cy); i > 10; i -= 5) {
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	4293      	cmp	r3, r2
 80019e2:	bfa8      	it	ge
 80019e4:	4613      	movge	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e080      	b.n	8001aec <testFilledTriangles+0x140>
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	b21c      	sxth	r4, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	b21d      	sxth	r5, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b21e      	sxth	r6, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	fa0f fc83 	sxth.w	ip, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	b291      	uxth	r1, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	b292      	uxth	r2, r2
 8001a30:	440a      	add	r2, r1
 8001a32:	b292      	uxth	r2, r2
 8001a34:	b212      	sxth	r2, r2
    	                         color565(0, i, i));
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	00c9      	lsls	r1, r1, #3
 8001a3a:	b209      	sxth	r1, r1
 8001a3c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8001a40:	b208      	sxth	r0, r1
 8001a42:	68f9      	ldr	r1, [r7, #12]
 8001a44:	10c9      	asrs	r1, r1, #3
 8001a46:	b209      	sxth	r1, r1
 8001a48:	f001 011f 	and.w	r1, r1, #31
 8001a4c:	b209      	sxth	r1, r1
 8001a4e:	4301      	orrs	r1, r0
 8001a50:	b209      	sxth	r1, r1
    	fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001a52:	b289      	uxth	r1, r1
 8001a54:	9102      	str	r1, [sp, #8]
 8001a56:	9201      	str	r2, [sp, #4]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	4663      	mov	r3, ip
 8001a5c:	4632      	mov	r2, r6
 8001a5e:	4629      	mov	r1, r5
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7ff fb44 	bl	80010ee <fillTriangle>
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	b21c      	sxth	r4, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b21d      	sxth	r5, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	b21e      	sxth	r6, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	fa0f fc83 	sxth.w	ip, r3
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	b299      	uxth	r1, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	440b      	add	r3, r1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b219      	sxth	r1, r3
    	                         color565(i, i, 0));
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001abc:	f023 0307 	bic.w	r3, r3, #7
 8001ac0:	b218      	sxth	r0, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	b21b      	sxth	r3, r3
    	drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	9302      	str	r3, [sp, #8]
 8001ad6:	9101      	str	r1, [sp, #4]
 8001ad8:	9200      	str	r2, [sp, #0]
 8001ada:	4663      	mov	r3, ip
 8001adc:	4632      	mov	r2, r6
 8001ade:	4629      	mov	r1, r5
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f7ff faca 	bl	800107a <drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3b05      	subs	r3, #5
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b0a      	cmp	r3, #10
 8001af0:	f73f af7b 	bgt.w	80019ea <testFilledTriangles+0x3e>
    }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000028 	.word	0x20000028
 8001b04:	2000002a 	.word	0x2000002a

08001b08 <testRoundRects>:

void testRoundRects() {
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8001b0e:	4b33      	ldr	r3, [pc, #204]	; (8001bdc <testRoundRects+0xd4>)
 8001b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b14:	0fda      	lsrs	r2, r3, #31
 8001b16:	4413      	add	r3, r2
 8001b18:	105b      	asrs	r3, r3, #1
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8001b20:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <testRoundRects+0xd8>)
 8001b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b26:	0fda      	lsrs	r2, r3, #31
 8001b28:	4413      	add	r3, r2
 8001b2a:	105b      	asrs	r3, r3, #1
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	613b      	str	r3, [r7, #16]

    fillScreen(BLACK);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff fc3a 	bl	80013ac <fillScreen>
    w     = min(_width, _height);
 8001b38:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <testRoundRects+0xd8>)
 8001b3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <testRoundRects+0xd4>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	4293      	cmp	r3, r2
 8001b46:	bfa8      	it	ge
 8001b48:	4613      	movge	r3, r2
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	60fb      	str	r3, [r7, #12]
    red = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8001b52:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b5c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e031      	b.n	8001bc8 <testRoundRects+0xc0>
        i2 = i / 2;
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	0fda      	lsrs	r2, r3, #31
 8001b68:	4413      	add	r3, r2
 8001b6a:	105b      	asrs	r3, r3, #1
 8001b6c:	607b      	str	r3, [r7, #4]
        red += step;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4413      	add	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b218      	sxth	r0, r3
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	b219      	sxth	r1, r3
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	b21c      	sxth	r4, r3
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	b21d      	sxth	r5, r3
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	da00      	bge.n	8001ba2 <testRoundRects+0x9a>
 8001ba0:	3307      	adds	r3, #7
 8001ba2:	10db      	asrs	r3, r3, #3
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bb0:	f023 0307 	bic.w	r3, r3, #7
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	9200      	str	r2, [sp, #0]
 8001bba:	462b      	mov	r3, r5
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	f7ff f916 	bl	8000dee <drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3306      	adds	r3, #6
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dbc9      	blt.n	8001b64 <testRoundRects+0x5c>
    }

}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000028 	.word	0x20000028
 8001be0:	2000002a 	.word	0x2000002a

08001be4 <testFilledRoundRects>:

void testFilledRoundRects() {
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8001bea:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <testFilledRoundRects+0xe0>)
 8001bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf0:	0fda      	lsrs	r2, r3, #31
 8001bf2:	4413      	add	r3, r2
 8001bf4:	105b      	asrs	r3, r3, #1
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <testFilledRoundRects+0xe4>)
 8001bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c02:	0fda      	lsrs	r2, r3, #31
 8001c04:	4413      	add	r3, r2
 8001c06:	105b      	asrs	r3, r3, #1
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]

    fillScreen(BLACK);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fbcc 	bl	80013ac <fillScreen>
    green = 256;
 8001c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c18:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <testFilledRoundRects+0xe4>)
 8001c1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <testFilledRoundRects+0xe0>)
 8001c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c26:	4293      	cmp	r3, r2
 8001c28:	bfa8      	it	ge
 8001c2a:	4613      	movge	r3, r2
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8001c38:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <testFilledRoundRects+0xe4>)
 8001c3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c40:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <testFilledRoundRects+0xe0>)
 8001c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c46:	4293      	cmp	r3, r2
 8001c48:	bfa8      	it	ge
 8001c4a:	4613      	movge	r3, r2
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e02f      	b.n	8001cb2 <testFilledRoundRects+0xce>
        i2 = i / 2;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	0fda      	lsrs	r2, r3, #31
 8001c56:	4413      	add	r3, r2
 8001c58:	105b      	asrs	r3, r3, #1
 8001c5a:	603b      	str	r3, [r7, #0]
        green -= step;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	613b      	str	r3, [r7, #16]
        fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	b218      	sxth	r0, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	b219      	sxth	r1, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	b21c      	sxth	r4, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	b21d      	sxth	r5, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	da00      	bge.n	8001c90 <testFilledRoundRects+0xac>
 8001c8e:	3307      	adds	r3, #7
 8001c90:	10db      	asrs	r3, r3, #3
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	00d2      	lsls	r2, r2, #3
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8001c9e:	b292      	uxth	r2, r2
 8001ca0:	9201      	str	r2, [sp, #4]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	4622      	mov	r2, r4
 8001ca8:	f7ff f96e 	bl	8000f88 <fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3b06      	subs	r3, #6
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b14      	cmp	r3, #20
 8001cb6:	dccc      	bgt.n	8001c52 <testFilledRoundRects+0x6e>
    }

}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000028 	.word	0x20000028
 8001cc8:	2000002a 	.word	0x2000002a

08001ccc <testFillScreen>:
void testFillScreen()
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
    fillScreen(BLACK);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f7ff fb6b 	bl	80013ac <fillScreen>
    fillScreen(RED);
 8001cd6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001cda:	f7ff fb67 	bl	80013ac <fillScreen>
    fillScreen(GREEN);
 8001cde:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001ce2:	f7ff fb63 	bl	80013ac <fillScreen>
    fillScreen(BLUE);
 8001ce6:	201f      	movs	r0, #31
 8001ce8:	f7ff fb60 	bl	80013ac <fillScreen>
    fillScreen(BLACK);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff fb5d 	bl	80013ac <fillScreen>
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <testAll>:

void testAll (void)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	af00      	add	r7, sp, #0
	testFillScreen();
 8001cfa:	f7ff ffe7 	bl	8001ccc <testFillScreen>
	testLines(CYAN);
 8001cfe:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001d02:	f7ff fb6d 	bl	80013e0 <testLines>
	testFastLines(RED, BLUE);
 8001d06:	211f      	movs	r1, #31
 8001d08:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001d0c:	f7ff fc6a 	bl	80015e4 <testFastLines>
	testRects(GREEN);
 8001d10:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001d14:	f7ff fca6 	bl	8001664 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8001d18:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8001d1c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001d20:	f7ff fcf2 	bl	8001708 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8001d24:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8001d28:	200a      	movs	r0, #10
 8001d2a:	f7ff fd5b 	bl	80017e4 <testFilledCircles>
	testCircles(10, WHITE);
 8001d2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d32:	200a      	movs	r0, #10
 8001d34:	f7ff fd94 	bl	8001860 <testCircles>
	testTriangles();
 8001d38:	f7ff fdd4 	bl	80018e4 <testTriangles>
	testFilledTriangles();
 8001d3c:	f7ff fe36 	bl	80019ac <testFilledTriangles>
	testRoundRects();
 8001d40:	f7ff fee2 	bl	8001b08 <testRoundRects>
	testFilledRoundRects();
 8001d44:	f7ff ff4e 	bl	8001be4 <testFilledRoundRects>
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2110      	movs	r1, #16
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <ST7735_Select+0x14>)
 8001d56:	f000 ff5b 	bl	8002c10 <HAL_GPIO_WritePin>
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40020000 	.word	0x40020000

08001d64 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <ST7735_Unselect+0x14>)
 8001d6e:	f000 ff4f 	bl	8002c10 <HAL_GPIO_WritePin>
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40020000 	.word	0x40020000

08001d7c <ST7735_Reset>:

void ST7735_Reset()
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2110      	movs	r1, #16
 8001d84:	4807      	ldr	r0, [pc, #28]	; (8001da4 <ST7735_Reset+0x28>)
 8001d86:	f000 ff43 	bl	8002c10 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001d8a:	2005      	movs	r0, #5
 8001d8c:	f000 fc9a 	bl	80026c4 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	2110      	movs	r1, #16
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <ST7735_Reset+0x28>)
 8001d96:	f000 ff3b 	bl	8002c10 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f000 fc92 	bl	80026c4 <HAL_Delay>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40020800 	.word	0x40020800

08001da8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2120      	movs	r1, #32
 8001db6:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <ST7735_WriteCommand+0x2c>)
 8001db8:	f000 ff2a 	bl	8002c10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001dbc:	1df9      	adds	r1, r7, #7
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <ST7735_WriteCommand+0x30>)
 8001dc6:	f001 fbea 	bl	800359e <HAL_SPI_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	20000034 	.word	0x20000034

08001ddc <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001de6:	2201      	movs	r2, #1
 8001de8:	2120      	movs	r1, #32
 8001dea:	4807      	ldr	r0, [pc, #28]	; (8001e08 <ST7735_WriteData+0x2c>)
 8001dec:	f000 ff10 	bl	8002c10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4804      	ldr	r0, [pc, #16]	; (8001e0c <ST7735_WriteData+0x30>)
 8001dfc:	f001 fbcf 	bl	800359e <HAL_SPI_Transmit>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	20000034 	.word	0x20000034

08001e10 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001e22:	e034      	b.n	8001e8e <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001e2e:	7afb      	ldrb	r3, [r7, #11]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ffb9 	bl	8001da8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001e40:	7abb      	ldrb	r3, [r7, #10]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001e4a:	7abb      	ldrb	r3, [r7, #10]
 8001e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e50:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001e52:	7abb      	ldrb	r3, [r7, #10]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001e58:	7abb      	ldrb	r3, [r7, #10]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ffbd 	bl	8001ddc <ST7735_WriteData>
            addr += numArgs;
 8001e62:	7abb      	ldrb	r3, [r7, #10]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001e6a:	89bb      	ldrh	r3, [r7, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00e      	beq.n	8001e8e <DisplayInit+0x7e>
            ms = *addr++;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001e7a:	89bb      	ldrh	r3, [r7, #12]
 8001e7c:	2bff      	cmp	r3, #255	; 0xff
 8001e7e:	d102      	bne.n	8001e86 <DisplayInit+0x76>
 8001e80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e84:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001e86:	89bb      	ldrh	r3, [r7, #12]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fc1b 	bl	80026c4 <HAL_Delay>
    while(numCommands--) {
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	1e5a      	subs	r2, r3, #1
 8001e92:	73fa      	strb	r2, [r7, #15]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1c5      	bne.n	8001e24 <DisplayInit+0x14>
        }
    }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4604      	mov	r4, r0
 8001eac:	4608      	mov	r0, r1
 8001eae:	4611      	mov	r1, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	71fb      	strb	r3, [r7, #7]
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71bb      	strb	r3, [r7, #6]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	717b      	strb	r3, [r7, #5]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001ec2:	202a      	movs	r0, #42	; 0x2a
 8001ec4:	f7ff ff70 	bl	8001da8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001ec8:	2300      	movs	r3, #0
 8001eca:	733b      	strb	r3, [r7, #12]
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <ST7735_SetAddressWindow+0x88>)
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	737b      	strb	r3, [r7, #13]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73bb      	strb	r3, [r7, #14]
 8001edc:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <ST7735_SetAddressWindow+0x88>)
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	797b      	ldrb	r3, [r7, #5]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	2104      	movs	r1, #4
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff74 	bl	8001ddc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001ef4:	202b      	movs	r0, #43	; 0x2b
 8001ef6:	f7ff ff57 	bl	8001da8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <ST7735_SetAddressWindow+0x8c>)
 8001efc:	781a      	ldrb	r2, [r3, #0]
 8001efe:	79bb      	ldrb	r3, [r7, #6]
 8001f00:	4413      	add	r3, r2
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <ST7735_SetAddressWindow+0x8c>)
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	793b      	ldrb	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	2104      	movs	r1, #4
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff5f 	bl	8001ddc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001f1e:	202c      	movs	r0, #44	; 0x2c
 8001f20:	f7ff ff42 	bl	8001da8 <ST7735_WriteCommand>
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd90      	pop	{r4, r7, pc}
 8001f2c:	2000002f 	.word	0x2000002f
 8001f30:	20000030 	.word	0x20000030

08001f34 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8001f3e:	f7ff ff05 	bl	8001d4c <ST7735_Select>
    ST7735_Reset();
 8001f42:	f7ff ff1b 	bl	8001d7c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001f46:	480c      	ldr	r0, [pc, #48]	; (8001f78 <ST7735_Init+0x44>)
 8001f48:	f7ff ff62 	bl	8001e10 <DisplayInit>
    DisplayInit(init_cmds2);
 8001f4c:	480b      	ldr	r0, [pc, #44]	; (8001f7c <ST7735_Init+0x48>)
 8001f4e:	f7ff ff5f 	bl	8001e10 <DisplayInit>
    DisplayInit(init_cmds3);
 8001f52:	480b      	ldr	r0, [pc, #44]	; (8001f80 <ST7735_Init+0x4c>)
 8001f54:	f7ff ff5c 	bl	8001e10 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <ST7735_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <ST7735_Init+0x54>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f810 	bl	8001f8c <ST7735_SetRotation>
    ST7735_Unselect();
 8001f6c:	f7ff fefa 	bl	8001d64 <ST7735_Unselect>

}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	08003a1c 	.word	0x08003a1c
 8001f7c:	08003a54 	.word	0x08003a54
 8001f80:	08003a64 	.word	0x08003a64
 8001f84:	2000002d 	.word	0x2000002d
 8001f88:	2000002e 	.word	0x2000002e

08001f8c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <ST7735_SetRotation+0xe4>)
 8001fa4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001fa6:	4b32      	ldr	r3, [pc, #200]	; (8002070 <ST7735_SetRotation+0xe4>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d84e      	bhi.n	800204c <ST7735_SetRotation+0xc0>
 8001fae:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <ST7735_SetRotation+0x28>)
 8001fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb4:	08001fc5 	.word	0x08001fc5
 8001fb8:	08001fe7 	.word	0x08001fe7
 8001fbc:	08002009 	.word	0x08002009
 8001fc0:	0800202b 	.word	0x0800202b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001fc4:	23c0      	movs	r3, #192	; 0xc0
 8001fc6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <ST7735_SetRotation+0xe8>)
 8001fca:	22a0      	movs	r2, #160	; 0xa0
 8001fcc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001fce:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <ST7735_SetRotation+0xec>)
 8001fd0:	2280      	movs	r2, #128	; 0x80
 8001fd2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001fd4:	4b29      	ldr	r3, [pc, #164]	; (800207c <ST7735_SetRotation+0xf0>)
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	4b29      	ldr	r3, [pc, #164]	; (8002080 <ST7735_SetRotation+0xf4>)
 8001fda:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <ST7735_SetRotation+0xf8>)
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <ST7735_SetRotation+0xfc>)
 8001fe2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001fe4:	e032      	b.n	800204c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001fe6:	23a0      	movs	r3, #160	; 0xa0
 8001fe8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <ST7735_SetRotation+0xec>)
 8001fec:	22a0      	movs	r2, #160	; 0xa0
 8001fee:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <ST7735_SetRotation+0xe8>)
 8001ff2:	2280      	movs	r2, #128	; 0x80
 8001ff4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	; (800207c <ST7735_SetRotation+0xf0>)
 8001ff8:	781a      	ldrb	r2, [r3, #0]
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <ST7735_SetRotation+0xfc>)
 8001ffc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <ST7735_SetRotation+0xf8>)
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <ST7735_SetRotation+0xf4>)
 8002004:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002006:	e021      	b.n	800204c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <ST7735_SetRotation+0xe8>)
 800200e:	22a0      	movs	r2, #160	; 0xa0
 8002010:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002012:	4b19      	ldr	r3, [pc, #100]	; (8002078 <ST7735_SetRotation+0xec>)
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8002018:	4b18      	ldr	r3, [pc, #96]	; (800207c <ST7735_SetRotation+0xf0>)
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <ST7735_SetRotation+0xf4>)
 800201e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <ST7735_SetRotation+0xf8>)
 8002022:	781a      	ldrb	r2, [r3, #0]
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <ST7735_SetRotation+0xfc>)
 8002026:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002028:	e010      	b.n	800204c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800202a:	2360      	movs	r3, #96	; 0x60
 800202c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <ST7735_SetRotation+0xec>)
 8002030:	22a0      	movs	r2, #160	; 0xa0
 8002032:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <ST7735_SetRotation+0xe8>)
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <ST7735_SetRotation+0xf0>)
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <ST7735_SetRotation+0xfc>)
 8002040:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <ST7735_SetRotation+0xf8>)
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <ST7735_SetRotation+0xf4>)
 8002048:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800204a:	bf00      	nop
  }
  ST7735_Select();
 800204c:	f7ff fe7e 	bl	8001d4c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8002050:	2036      	movs	r0, #54	; 0x36
 8002052:	f7ff fea9 	bl	8001da8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8002056:	f107 030f 	add.w	r3, r7, #15
 800205a:	2101      	movs	r1, #1
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff febd 	bl	8001ddc <ST7735_WriteData>
  ST7735_Unselect();
 8002062:	f7ff fe7f 	bl	8001d64 <ST7735_Unselect>
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000002c 	.word	0x2000002c
 8002074:	2000002a 	.word	0x2000002a
 8002078:	20000028 	.word	0x20000028
 800207c:	2000002d 	.word	0x2000002d
 8002080:	2000002f 	.word	0x2000002f
 8002084:	2000002e 	.word	0x2000002e
 8002088:	20000030 	.word	0x20000030

0800208c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
 8002096:	460b      	mov	r3, r1
 8002098:	80bb      	strh	r3, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	4a17      	ldr	r2, [pc, #92]	; (8002100 <ST7735_DrawPixel+0x74>)
 80020a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020a6:	4293      	cmp	r3, r2
 80020a8:	da26      	bge.n	80020f8 <ST7735_DrawPixel+0x6c>
 80020aa:	88bb      	ldrh	r3, [r7, #4]
 80020ac:	4a15      	ldr	r2, [pc, #84]	; (8002104 <ST7735_DrawPixel+0x78>)
 80020ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020b2:	4293      	cmp	r3, r2
 80020b4:	da20      	bge.n	80020f8 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 80020b6:	f7ff fe49 	bl	8001d4c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	b2d8      	uxtb	r0, r3
 80020be:	88bb      	ldrh	r3, [r7, #4]
 80020c0:	b2d9      	uxtb	r1, r3
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	88bb      	ldrh	r3, [r7, #4]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f7ff fee7 	bl	8001ea4 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	b29b      	uxth	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	733b      	strb	r3, [r7, #12]
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	2102      	movs	r1, #2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fe75 	bl	8001ddc <ST7735_WriteData>

    ST7735_Unselect();
 80020f2:	f7ff fe37 	bl	8001d64 <ST7735_Unselect>
 80020f6:	e000      	b.n	80020fa <ST7735_DrawPixel+0x6e>
        return;
 80020f8:	bf00      	nop
}
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000028 	.word	0x20000028
 8002104:	2000002a 	.word	0x2000002a

08002108 <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	4604      	mov	r4, r0
 8002110:	4608      	mov	r0, r1
 8002112:	4611      	mov	r1, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4623      	mov	r3, r4
 8002118:	80fb      	strh	r3, [r7, #6]
 800211a:	4603      	mov	r3, r0
 800211c:	80bb      	strh	r3, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	807b      	strh	r3, [r7, #2]
 8002122:	4613      	mov	r3, r2
 8002124:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	4a37      	ldr	r2, [pc, #220]	; (8002208 <ST7735_FillRectangle+0x100>)
 800212a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800212e:	4293      	cmp	r3, r2
 8002130:	da66      	bge.n	8002200 <ST7735_FillRectangle+0xf8>
 8002132:	88bb      	ldrh	r3, [r7, #4]
 8002134:	4a35      	ldr	r2, [pc, #212]	; (800220c <ST7735_FillRectangle+0x104>)
 8002136:	f9b2 2000 	ldrsh.w	r2, [r2]
 800213a:	4293      	cmp	r3, r2
 800213c:	da60      	bge.n	8002200 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 800213e:	88fa      	ldrh	r2, [r7, #6]
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	4413      	add	r3, r2
 8002144:	4a30      	ldr	r2, [pc, #192]	; (8002208 <ST7735_FillRectangle+0x100>)
 8002146:	f9b2 2000 	ldrsh.w	r2, [r2]
 800214a:	4293      	cmp	r3, r2
 800214c:	dd06      	ble.n	800215c <ST7735_FillRectangle+0x54>
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <ST7735_FillRectangle+0x100>)
 8002150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002154:	b29a      	uxth	r2, r3
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 800215c:	88ba      	ldrh	r2, [r7, #4]
 800215e:	883b      	ldrh	r3, [r7, #0]
 8002160:	4413      	add	r3, r2
 8002162:	4a2a      	ldr	r2, [pc, #168]	; (800220c <ST7735_FillRectangle+0x104>)
 8002164:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002168:	4293      	cmp	r3, r2
 800216a:	dd06      	ble.n	800217a <ST7735_FillRectangle+0x72>
 800216c:	4b27      	ldr	r3, [pc, #156]	; (800220c <ST7735_FillRectangle+0x104>)
 800216e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002172:	b29a      	uxth	r2, r3
 8002174:	88bb      	ldrh	r3, [r7, #4]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800217a:	f7ff fde7 	bl	8001d4c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	b2d8      	uxtb	r0, r3
 8002182:	88bb      	ldrh	r3, [r7, #4]
 8002184:	b2d9      	uxtb	r1, r3
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4413      	add	r3, r2
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b2dc      	uxtb	r4, r3
 8002196:	88bb      	ldrh	r3, [r7, #4]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	883b      	ldrh	r3, [r7, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4413      	add	r3, r2
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4622      	mov	r2, r4
 80021a8:	f7ff fe7c 	bl	8001ea4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80021ac:	8c3b      	ldrh	r3, [r7, #32]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	733b      	strb	r3, [r7, #12]
 80021b6:	8c3b      	ldrh	r3, [r7, #32]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80021bc:	2201      	movs	r2, #1
 80021be:	2120      	movs	r1, #32
 80021c0:	4813      	ldr	r0, [pc, #76]	; (8002210 <ST7735_FillRectangle+0x108>)
 80021c2:	f000 fd25 	bl	8002c10 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80021c6:	883b      	ldrh	r3, [r7, #0]
 80021c8:	80bb      	strh	r3, [r7, #4]
 80021ca:	e013      	b.n	80021f4 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	80fb      	strh	r3, [r7, #6]
 80021d0:	e00a      	b.n	80021e8 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80021d2:	f107 010c 	add.w	r1, r7, #12
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	2202      	movs	r2, #2
 80021dc:	480d      	ldr	r0, [pc, #52]	; (8002214 <ST7735_FillRectangle+0x10c>)
 80021de:	f001 f9de 	bl	800359e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	80fb      	strh	r3, [r7, #6]
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f1      	bne.n	80021d2 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 80021ee:	88bb      	ldrh	r3, [r7, #4]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	80bb      	strh	r3, [r7, #4]
 80021f4:	88bb      	ldrh	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1e8      	bne.n	80021cc <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 80021fa:	f7ff fdb3 	bl	8001d64 <ST7735_Unselect>
 80021fe:	e000      	b.n	8002202 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8002200:	bf00      	nop
}
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	20000028 	.word	0x20000028
 800220c:	2000002a 	.word	0x2000002a
 8002210:	40020800 	.word	0x40020800
 8002214:	20000034 	.word	0x20000034

08002218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800221c:	f000 f9e0 	bl	80025e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002220:	f000 f80e 	bl	8002240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002224:	f000 f8ae 	bl	8002384 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002228:	f000 f874 	bl	8002314 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ST7735_Init(0);
 800222c:	2000      	movs	r0, #0
 800222e:	f7ff fe81 	bl	8001f34 <ST7735_Init>
  fillScreen(BLACK);
 8002232:	2000      	movs	r0, #0
 8002234:	f7ff f8ba 	bl	80013ac <fillScreen>
  testAll();
 8002238:	f7ff fd5d 	bl	8001cf6 <testAll>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800223c:	e7fe      	b.n	800223c <main+0x24>
	...

08002240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b094      	sub	sp, #80	; 0x50
 8002244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	2230      	movs	r2, #48	; 0x30
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f001 fbd0 	bl	80039f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	2300      	movs	r3, #0
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	4b28      	ldr	r3, [pc, #160]	; (800230c <SystemClock_Config+0xcc>)
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	4a27      	ldr	r2, [pc, #156]	; (800230c <SystemClock_Config+0xcc>)
 800226e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002272:	6413      	str	r3, [r2, #64]	; 0x40
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <SystemClock_Config+0xcc>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002280:	2300      	movs	r3, #0
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	4b22      	ldr	r3, [pc, #136]	; (8002310 <SystemClock_Config+0xd0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a21      	ldr	r2, [pc, #132]	; (8002310 <SystemClock_Config+0xd0>)
 800228a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <SystemClock_Config+0xd0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800229c:	2301      	movs	r3, #1
 800229e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a6:	2302      	movs	r3, #2
 80022a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80022b0:	2306      	movs	r3, #6
 80022b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022b4:	23a8      	movs	r3, #168	; 0xa8
 80022b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022b8:	2302      	movs	r3, #2
 80022ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022bc:	2304      	movs	r3, #4
 80022be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c0:	f107 0320 	add.w	r3, r7, #32
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fcbd 	bl	8002c44 <HAL_RCC_OscConfig>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022d0:	f000 f8a8 	bl	8002424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022d4:	230f      	movs	r3, #15
 80022d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d8:	2302      	movs	r3, #2
 80022da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	2105      	movs	r1, #5
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 ff1e 	bl	8003134 <HAL_RCC_ClockConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022fe:	f000 f891 	bl	8002424 <Error_Handler>
  }
}
 8002302:	bf00      	nop
 8002304:	3750      	adds	r7, #80	; 0x50
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40007000 	.word	0x40007000

08002314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002318:	4b18      	ldr	r3, [pc, #96]	; (800237c <MX_SPI1_Init+0x68>)
 800231a:	4a19      	ldr	r2, [pc, #100]	; (8002380 <MX_SPI1_Init+0x6c>)
 800231c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <MX_SPI1_Init+0x68>)
 8002320:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <MX_SPI1_Init+0x68>)
 8002328:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800232c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <MX_SPI1_Init+0x68>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <MX_SPI1_Init+0x68>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <MX_SPI1_Init+0x68>)
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <MX_SPI1_Init+0x68>)
 8002342:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002346:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <MX_SPI1_Init+0x68>)
 800234a:	2218      	movs	r2, #24
 800234c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <MX_SPI1_Init+0x68>)
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <MX_SPI1_Init+0x68>)
 8002356:	2200      	movs	r2, #0
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <MX_SPI1_Init+0x68>)
 800235c:	2200      	movs	r2, #0
 800235e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <MX_SPI1_Init+0x68>)
 8002362:	220a      	movs	r2, #10
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002366:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_SPI1_Init+0x68>)
 8002368:	f001 f890 	bl	800348c <HAL_SPI_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002372:	f000 f857 	bl	8002424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000034 	.word	0x20000034
 8002380:	40013000 	.word	0x40013000

08002384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
 8002398:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b1f      	ldr	r3, [pc, #124]	; (800241c <MX_GPIO_Init+0x98>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <MX_GPIO_Init+0x98>)
 80023a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <MX_GPIO_Init+0x98>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_GPIO_Init+0x98>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a17      	ldr	r2, [pc, #92]	; (800241c <MX_GPIO_Init+0x98>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <MX_GPIO_Init+0x98>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_GPIO_Init+0x98>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <MX_GPIO_Init+0x98>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <MX_GPIO_Init+0x98>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, screen_reset_Pin|screen_DC_Pin, GPIO_PIN_RESET);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2130      	movs	r1, #48	; 0x30
 80023f2:	480b      	ldr	r0, [pc, #44]	; (8002420 <MX_GPIO_Init+0x9c>)
 80023f4:	f000 fc0c 	bl	8002c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : screen_reset_Pin screen_DC_Pin */
  GPIO_InitStruct.Pin = screen_reset_Pin|screen_DC_Pin;
 80023f8:	2330      	movs	r3, #48	; 0x30
 80023fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fc:	2301      	movs	r3, #1
 80023fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002408:	f107 030c 	add.w	r3, r7, #12
 800240c:	4619      	mov	r1, r3
 800240e:	4804      	ldr	r0, [pc, #16]	; (8002420 <MX_GPIO_Init+0x9c>)
 8002410:	f000 fa62 	bl	80028d8 <HAL_GPIO_Init>

}
 8002414:	bf00      	nop
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	40020800 	.word	0x40020800

08002424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_MspInit+0x4c>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <HAL_MspInit+0x4c>)
 8002444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_MspInit+0x4c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_MspInit+0x4c>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_MspInit+0x4c>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_MspInit+0x4c>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800

08002484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a19      	ldr	r2, [pc, #100]	; (8002508 <HAL_SPI_MspInit+0x84>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d12b      	bne.n	80024fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4a17      	ldr	r2, [pc, #92]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a10      	ldr	r2, [pc, #64]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80024de:	23b0      	movs	r3, #176	; 0xb0
 80024e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ea:	2303      	movs	r3, #3
 80024ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ee:	2305      	movs	r3, #5
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <HAL_SPI_MspInit+0x8c>)
 80024fa:	f000 f9ed 	bl	80028d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024fe:	bf00      	nop
 8002500:	3728      	adds	r7, #40	; 0x28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40013000 	.word	0x40013000
 800250c:	40023800 	.word	0x40023800
 8002510:	40020000 	.word	0x40020000

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <NMI_Handler+0x4>

0800251a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <HardFault_Handler+0x4>

08002520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <MemManage_Handler+0x4>

08002526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <UsageFault_Handler+0x4>

08002532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002560:	f000 f890 	bl	8002684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}

08002568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <SystemInit+0x20>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <SystemInit+0x20>)
 8002574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800258c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002590:	480d      	ldr	r0, [pc, #52]	; (80025c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002592:	490e      	ldr	r1, [pc, #56]	; (80025cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002598:	e002      	b.n	80025a0 <LoopCopyDataInit>

0800259a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800259c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259e:	3304      	adds	r3, #4

080025a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a4:	d3f9      	bcc.n	800259a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025a8:	4c0b      	ldr	r4, [pc, #44]	; (80025d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ac:	e001      	b.n	80025b2 <LoopFillZerobss>

080025ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b0:	3204      	adds	r2, #4

080025b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b4:	d3fb      	bcc.n	80025ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025b6:	f7ff ffd7 	bl	8002568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ba:	f001 f9f7 	bl	80039ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025be:	f7ff fe2b 	bl	8002218 <main>
  bx  lr    
 80025c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80025d0:	08003ab0 	.word	0x08003ab0
  ldr r2, =_sbss
 80025d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80025d8:	20000090 	.word	0x20000090

080025dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025dc:	e7fe      	b.n	80025dc <ADC_IRQHandler>
	...

080025e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_Init+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <HAL_Init+0x40>)
 80025ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_Init+0x40>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_Init+0x40>)
 80025f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_Init+0x40>)
 8002602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002608:	2003      	movs	r0, #3
 800260a:	f000 f931 	bl	8002870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260e:	200f      	movs	r0, #15
 8002610:	f000 f808 	bl	8002624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002614:	f7ff ff0e 	bl	8002434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023c00 	.word	0x40023c00

08002624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_InitTick+0x54>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_InitTick+0x58>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263a:	fbb3 f3f1 	udiv	r3, r3, r1
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f93b 	bl	80028be <HAL_SYSTICK_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e00e      	b.n	8002670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d80a      	bhi.n	800266e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002658:	2200      	movs	r2, #0
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f000 f911 	bl	8002886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <HAL_InitTick+0x5c>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000000 	.word	0x20000000
 800267c:	20000008 	.word	0x20000008
 8002680:	20000004 	.word	0x20000004

08002684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_IncTick+0x20>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_IncTick+0x24>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4413      	add	r3, r2
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_IncTick+0x24>)
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000008 	.word	0x20000008
 80026a8:	2000008c 	.word	0x2000008c

080026ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return uwTick;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_GetTick+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	2000008c 	.word	0x2000008c

080026c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff ffee 	bl	80026ac <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d005      	beq.n	80026ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_Delay+0x44>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ea:	bf00      	nop
 80026ec:	f7ff ffde 	bl	80026ac <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d8f7      	bhi.n	80026ec <HAL_Delay+0x28>
  {
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000008 	.word	0x20000008

0800270c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002728:	4013      	ands	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273e:	4a04      	ldr	r2, [pc, #16]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60d3      	str	r3, [r2, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <__NVIC_GetPriorityGrouping+0x18>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	f003 0307 	and.w	r3, r3, #7
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	; (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
         );
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800283c:	d301      	bcc.n	8002842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283e:	2301      	movs	r3, #1
 8002840:	e00f      	b.n	8002862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <SysTick_Config+0x40>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284a:	210f      	movs	r1, #15
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	f7ff ff8e 	bl	8002770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <SysTick_Config+0x40>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <SysTick_Config+0x40>)
 800285c:	2207      	movs	r2, #7
 800285e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	e000e010 	.word	0xe000e010

08002870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff47 	bl	800270c <__NVIC_SetPriorityGrouping>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002898:	f7ff ff5c 	bl	8002754 <__NVIC_GetPriorityGrouping>
 800289c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7ff ff8e 	bl	80027c4 <NVIC_EncodePriority>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff5d 	bl	8002770 <__NVIC_SetPriority>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ffb0 	bl	800282c <SysTick_Config>
 80028cc:	4603      	mov	r3, r0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	e16b      	b.n	8002bcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028f4:	2201      	movs	r2, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	429a      	cmp	r2, r3
 800290e:	f040 815a 	bne.w	8002bc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d005      	beq.n	800292a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002926:	2b02      	cmp	r3, #2
 8002928:	d130      	bne.n	800298c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	2203      	movs	r2, #3
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002960:	2201      	movs	r2, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 0201 	and.w	r2, r3, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b03      	cmp	r3, #3
 8002996:	d017      	beq.n	80029c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	2203      	movs	r2, #3
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d123      	bne.n	8002a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	08da      	lsrs	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3208      	adds	r2, #8
 80029dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	220f      	movs	r2, #15
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	08da      	lsrs	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3208      	adds	r2, #8
 8002a16:	69b9      	ldr	r1, [r7, #24]
 8002a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0203 	and.w	r2, r3, #3
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80b4 	beq.w	8002bc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b60      	ldr	r3, [pc, #384]	; (8002be4 <HAL_GPIO_Init+0x30c>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a5f      	ldr	r2, [pc, #380]	; (8002be4 <HAL_GPIO_Init+0x30c>)
 8002a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b5d      	ldr	r3, [pc, #372]	; (8002be4 <HAL_GPIO_Init+0x30c>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a7a:	4a5b      	ldr	r2, [pc, #364]	; (8002be8 <HAL_GPIO_Init+0x310>)
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	3302      	adds	r3, #2
 8002a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	220f      	movs	r2, #15
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a52      	ldr	r2, [pc, #328]	; (8002bec <HAL_GPIO_Init+0x314>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d02b      	beq.n	8002afe <HAL_GPIO_Init+0x226>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a51      	ldr	r2, [pc, #324]	; (8002bf0 <HAL_GPIO_Init+0x318>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d025      	beq.n	8002afa <HAL_GPIO_Init+0x222>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a50      	ldr	r2, [pc, #320]	; (8002bf4 <HAL_GPIO_Init+0x31c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01f      	beq.n	8002af6 <HAL_GPIO_Init+0x21e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a4f      	ldr	r2, [pc, #316]	; (8002bf8 <HAL_GPIO_Init+0x320>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d019      	beq.n	8002af2 <HAL_GPIO_Init+0x21a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4e      	ldr	r2, [pc, #312]	; (8002bfc <HAL_GPIO_Init+0x324>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_GPIO_Init+0x216>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4d      	ldr	r2, [pc, #308]	; (8002c00 <HAL_GPIO_Init+0x328>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00d      	beq.n	8002aea <HAL_GPIO_Init+0x212>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4c      	ldr	r2, [pc, #304]	; (8002c04 <HAL_GPIO_Init+0x32c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <HAL_GPIO_Init+0x20e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4b      	ldr	r2, [pc, #300]	; (8002c08 <HAL_GPIO_Init+0x330>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_GPIO_Init+0x20a>
 8002ade:	2307      	movs	r3, #7
 8002ae0:	e00e      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	e00c      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002ae6:	2306      	movs	r3, #6
 8002ae8:	e00a      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002aea:	2305      	movs	r3, #5
 8002aec:	e008      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002aee:	2304      	movs	r3, #4
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002af2:	2303      	movs	r3, #3
 8002af4:	e004      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e002      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_GPIO_Init+0x228>
 8002afe:	2300      	movs	r3, #0
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f002 0203 	and.w	r2, r2, #3
 8002b06:	0092      	lsls	r2, r2, #2
 8002b08:	4093      	lsls	r3, r2
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b10:	4935      	ldr	r1, [pc, #212]	; (8002be8 <HAL_GPIO_Init+0x310>)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	3302      	adds	r3, #2
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b42:	4a32      	ldr	r2, [pc, #200]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b48:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b6c:	4a27      	ldr	r2, [pc, #156]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc0:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <HAL_GPIO_Init+0x334>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b0f      	cmp	r3, #15
 8002bd0:	f67f ae90 	bls.w	80028f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40013800 	.word	0x40013800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40021400 	.word	0x40021400
 8002c04:	40021800 	.word	0x40021800
 8002c08:	40021c00 	.word	0x40021c00
 8002c0c:	40013c00 	.word	0x40013c00

08002c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c20:	787b      	ldrb	r3, [r7, #1]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c26:	887a      	ldrh	r2, [r7, #2]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c2c:	e003      	b.n	8002c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c2e:	887b      	ldrh	r3, [r7, #2]
 8002c30:	041a      	lsls	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	619a      	str	r2, [r3, #24]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e267      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d075      	beq.n	8002d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c62:	4b88      	ldr	r3, [pc, #544]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d00c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c6e:	4b85      	ldr	r3, [pc, #532]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d112      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c7a:	4b82      	ldr	r3, [pc, #520]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c86:	d10b      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	4b7e      	ldr	r3, [pc, #504]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d05b      	beq.n	8002d4c <HAL_RCC_OscConfig+0x108>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d157      	bne.n	8002d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e242      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca8:	d106      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x74>
 8002caa:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a75      	ldr	r2, [pc, #468]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e01d      	b.n	8002cf4 <HAL_RCC_OscConfig+0xb0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x98>
 8002cc2:	4b70      	ldr	r3, [pc, #448]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a6f      	ldr	r2, [pc, #444]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b6d      	ldr	r3, [pc, #436]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6c      	ldr	r2, [pc, #432]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0xb0>
 8002cdc:	4b69      	ldr	r3, [pc, #420]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a68      	ldr	r2, [pc, #416]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b66      	ldr	r3, [pc, #408]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a65      	ldr	r2, [pc, #404]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7ff fcd6 	bl	80026ac <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d04:	f7ff fcd2 	bl	80026ac <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	; 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e207      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b5b      	ldr	r3, [pc, #364]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0xc0>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7ff fcc2 	bl	80026ac <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7ff fcbe 	bl	80026ac <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1f3      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	4b51      	ldr	r3, [pc, #324]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0xe8>
 8002d4a:	e000      	b.n	8002d4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d063      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d11c      	bne.n	8002dac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d72:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d116      	bne.n	8002dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x152>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e1c7      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4937      	ldr	r1, [pc, #220]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	e03a      	b.n	8002e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db4:	4b34      	ldr	r3, [pc, #208]	; (8002e88 <HAL_RCC_OscConfig+0x244>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7ff fc77 	bl	80026ac <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7ff fc73 	bl	80026ac <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1a8      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de0:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4925      	ldr	r1, [pc, #148]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df6:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_RCC_OscConfig+0x244>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7ff fc56 	bl	80026ac <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e04:	f7ff fc52 	bl	80026ac <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e187      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d036      	beq.n	8002e9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <HAL_RCC_OscConfig+0x248>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7ff fc36 	bl	80026ac <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e44:	f7ff fc32 	bl	80026ac <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e167      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_OscConfig+0x240>)
 8002e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x200>
 8002e62:	e01b      	b.n	8002e9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_RCC_OscConfig+0x248>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7ff fc1f 	bl	80026ac <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	e00e      	b.n	8002e90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e72:	f7ff fc1b 	bl	80026ac <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d907      	bls.n	8002e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e150      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
 8002e84:	40023800 	.word	0x40023800
 8002e88:	42470000 	.word	0x42470000
 8002e8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	4b88      	ldr	r3, [pc, #544]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ea      	bne.n	8002e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8097 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eae:	4b81      	ldr	r3, [pc, #516]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	4b7d      	ldr	r3, [pc, #500]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a7c      	ldr	r2, [pc, #496]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b7a      	ldr	r3, [pc, #488]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b77      	ldr	r3, [pc, #476]	; (80030b8 <HAL_RCC_OscConfig+0x474>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d118      	bne.n	8002f18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee6:	4b74      	ldr	r3, [pc, #464]	; (80030b8 <HAL_RCC_OscConfig+0x474>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a73      	ldr	r2, [pc, #460]	; (80030b8 <HAL_RCC_OscConfig+0x474>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef2:	f7ff fbdb 	bl	80026ac <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7ff fbd7 	bl	80026ac <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e10c      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <HAL_RCC_OscConfig+0x474>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x2ea>
 8002f20:	4b64      	ldr	r3, [pc, #400]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a63      	ldr	r2, [pc, #396]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	e01c      	b.n	8002f68 <HAL_RCC_OscConfig+0x324>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b05      	cmp	r3, #5
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x30c>
 8002f36:	4b5f      	ldr	r3, [pc, #380]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a5e      	ldr	r2, [pc, #376]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
 8002f42:	4b5c      	ldr	r3, [pc, #368]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a5b      	ldr	r2, [pc, #364]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_OscConfig+0x324>
 8002f50:	4b58      	ldr	r3, [pc, #352]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a57      	ldr	r2, [pc, #348]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	4b55      	ldr	r3, [pc, #340]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a54      	ldr	r2, [pc, #336]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f62:	f023 0304 	bic.w	r3, r3, #4
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d015      	beq.n	8002f9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7ff fb9c 	bl	80026ac <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7ff fb98 	bl	80026ac <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e0cb      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8e:	4b49      	ldr	r3, [pc, #292]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0ee      	beq.n	8002f78 <HAL_RCC_OscConfig+0x334>
 8002f9a:	e014      	b.n	8002fc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9c:	f7ff fb86 	bl	80026ac <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7ff fb82 	bl	80026ac <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0b5      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fba:	4b3e      	ldr	r3, [pc, #248]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ee      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fcc:	4b39      	ldr	r3, [pc, #228]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	4a38      	ldr	r2, [pc, #224]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80a1 	beq.w	8003124 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fe2:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d05c      	beq.n	80030a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d141      	bne.n	800307a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_RCC_OscConfig+0x478>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7ff fb56 	bl	80026ac <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003004:	f7ff fb52 	bl	80026ac <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e087      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	019b      	lsls	r3, r3, #6
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	3b01      	subs	r3, #1
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	491b      	ldr	r1, [pc, #108]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800304c:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <HAL_RCC_OscConfig+0x478>)
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7ff fb2b 	bl	80026ac <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305a:	f7ff fb27 	bl	80026ac <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e05c      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x416>
 8003078:	e054      	b.n	8003124 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_RCC_OscConfig+0x478>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7ff fb14 	bl	80026ac <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003088:	f7ff fb10 	bl	80026ac <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e045      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_RCC_OscConfig+0x470>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x444>
 80030a6:	e03d      	b.n	8003124 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e038      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40007000 	.word	0x40007000
 80030bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030c0:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <HAL_RCC_OscConfig+0x4ec>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d028      	beq.n	8003120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d121      	bne.n	8003120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d11a      	bne.n	8003120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030f0:	4013      	ands	r3, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d111      	bne.n	8003120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	3b01      	subs	r3, #1
 800310a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d107      	bne.n	8003120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0cc      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b68      	ldr	r3, [pc, #416]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d90c      	bls.n	8003170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b65      	ldr	r3, [pc, #404]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b63      	ldr	r3, [pc, #396]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0b8      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003188:	4b59      	ldr	r3, [pc, #356]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a58      	ldr	r2, [pc, #352]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a0:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a52      	ldr	r2, [pc, #328]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ac:	4b50      	ldr	r3, [pc, #320]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	494d      	ldr	r1, [pc, #308]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d044      	beq.n	8003254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b47      	ldr	r3, [pc, #284]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d119      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e07f      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f2:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e06f      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003202:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e067      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003212:	4b37      	ldr	r3, [pc, #220]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 0203 	bic.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4934      	ldr	r1, [pc, #208]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	4313      	orrs	r3, r2
 8003222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003224:	f7ff fa42 	bl	80026ac <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	e00a      	b.n	8003242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800322c:	f7ff fa3e 	bl	80026ac <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e04f      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 020c 	and.w	r2, r3, #12
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	429a      	cmp	r2, r3
 8003252:	d1eb      	bne.n	800322c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003254:	4b25      	ldr	r3, [pc, #148]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d20c      	bcs.n	800327c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b22      	ldr	r3, [pc, #136]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b20      	ldr	r3, [pc, #128]	; (80032ec <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e032      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4916      	ldr	r1, [pc, #88]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a6:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	490e      	ldr	r1, [pc, #56]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ba:	f000 f821 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 80032be:	4602      	mov	r2, r0
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	490a      	ldr	r1, [pc, #40]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	5ccb      	ldrb	r3, [r1, r3]
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032d6:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff f9a2 	bl	8002624 <HAL_InitTick>

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40023c00 	.word	0x40023c00
 80032f0:	40023800 	.word	0x40023800
 80032f4:	08003a90 	.word	0x08003a90
 80032f8:	20000000 	.word	0x20000000
 80032fc:	20000004 	.word	0x20000004

08003300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003304:	b090      	sub	sp, #64	; 0x40
 8003306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
 800330c:	2300      	movs	r3, #0
 800330e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003310:	2300      	movs	r3, #0
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003318:	4b59      	ldr	r3, [pc, #356]	; (8003480 <HAL_RCC_GetSysClockFreq+0x180>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b08      	cmp	r3, #8
 8003322:	d00d      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x40>
 8003324:	2b08      	cmp	r3, #8
 8003326:	f200 80a1 	bhi.w	800346c <HAL_RCC_GetSysClockFreq+0x16c>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x34>
 800332e:	2b04      	cmp	r3, #4
 8003330:	d003      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x3a>
 8003332:	e09b      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003334:	4b53      	ldr	r3, [pc, #332]	; (8003484 <HAL_RCC_GetSysClockFreq+0x184>)
 8003336:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003338:	e09b      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800333a:	4b53      	ldr	r3, [pc, #332]	; (8003488 <HAL_RCC_GetSysClockFreq+0x188>)
 800333c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800333e:	e098      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003340:	4b4f      	ldr	r3, [pc, #316]	; (8003480 <HAL_RCC_GetSysClockFreq+0x180>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003348:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800334a:	4b4d      	ldr	r3, [pc, #308]	; (8003480 <HAL_RCC_GetSysClockFreq+0x180>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d028      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003356:	4b4a      	ldr	r3, [pc, #296]	; (8003480 <HAL_RCC_GetSysClockFreq+0x180>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	099b      	lsrs	r3, r3, #6
 800335c:	2200      	movs	r2, #0
 800335e:	623b      	str	r3, [r7, #32]
 8003360:	627a      	str	r2, [r7, #36]	; 0x24
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003368:	2100      	movs	r1, #0
 800336a:	4b47      	ldr	r3, [pc, #284]	; (8003488 <HAL_RCC_GetSysClockFreq+0x188>)
 800336c:	fb03 f201 	mul.w	r2, r3, r1
 8003370:	2300      	movs	r3, #0
 8003372:	fb00 f303 	mul.w	r3, r0, r3
 8003376:	4413      	add	r3, r2
 8003378:	4a43      	ldr	r2, [pc, #268]	; (8003488 <HAL_RCC_GetSysClockFreq+0x188>)
 800337a:	fba0 1202 	umull	r1, r2, r0, r2
 800337e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003380:	460a      	mov	r2, r1
 8003382:	62ba      	str	r2, [r7, #40]	; 0x28
 8003384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003386:	4413      	add	r3, r2
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338c:	2200      	movs	r2, #0
 800338e:	61bb      	str	r3, [r7, #24]
 8003390:	61fa      	str	r2, [r7, #28]
 8003392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003396:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800339a:	f7fc ff15 	bl	80001c8 <__aeabi_uldivmod>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4613      	mov	r3, r2
 80033a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a6:	e053      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a8:	4b35      	ldr	r3, [pc, #212]	; (8003480 <HAL_RCC_GetSysClockFreq+0x180>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	099b      	lsrs	r3, r3, #6
 80033ae:	2200      	movs	r2, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	617a      	str	r2, [r7, #20]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033ba:	f04f 0b00 	mov.w	fp, #0
 80033be:	4652      	mov	r2, sl
 80033c0:	465b      	mov	r3, fp
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	0159      	lsls	r1, r3, #5
 80033cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d0:	0150      	lsls	r0, r2, #5
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	ebb2 080a 	subs.w	r8, r2, sl
 80033da:	eb63 090b 	sbc.w	r9, r3, fp
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033f2:	ebb2 0408 	subs.w	r4, r2, r8
 80033f6:	eb63 0509 	sbc.w	r5, r3, r9
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	00eb      	lsls	r3, r5, #3
 8003404:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003408:	00e2      	lsls	r2, r4, #3
 800340a:	4614      	mov	r4, r2
 800340c:	461d      	mov	r5, r3
 800340e:	eb14 030a 	adds.w	r3, r4, sl
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	eb45 030b 	adc.w	r3, r5, fp
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003426:	4629      	mov	r1, r5
 8003428:	028b      	lsls	r3, r1, #10
 800342a:	4621      	mov	r1, r4
 800342c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003430:	4621      	mov	r1, r4
 8003432:	028a      	lsls	r2, r1, #10
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343a:	2200      	movs	r2, #0
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	60fa      	str	r2, [r7, #12]
 8003440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003444:	f7fc fec0 	bl	80001c8 <__aeabi_uldivmod>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4613      	mov	r3, r2
 800344e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCC_GetSysClockFreq+0x180>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	3301      	adds	r3, #1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800346a:	e002      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCC_GetSysClockFreq+0x184>)
 800346e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003474:	4618      	mov	r0, r3
 8003476:	3740      	adds	r7, #64	; 0x40
 8003478:	46bd      	mov	sp, r7
 800347a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	00f42400 	.word	0x00f42400
 8003488:	00b71b00 	.word	0x00b71b00

0800348c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e07b      	b.n	8003596 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d108      	bne.n	80034b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ae:	d009      	beq.n	80034c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	61da      	str	r2, [r3, #28]
 80034b6:	e005      	b.n	80034c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe ffd0 	bl	8002484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	ea42 0103 	orr.w	r1, r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	f003 0104 	and.w	r1, r3, #4
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f003 0210 	and.w	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003584:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b088      	sub	sp, #32
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_SPI_Transmit+0x22>
 80035bc:	2302      	movs	r3, #2
 80035be:	e126      	b.n	800380e <HAL_SPI_Transmit+0x270>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c8:	f7ff f870 	bl	80026ac <HAL_GetTick>
 80035cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d002      	beq.n	80035e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035de:	2302      	movs	r3, #2
 80035e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035e2:	e10b      	b.n	80037fc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_SPI_Transmit+0x52>
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035f4:	e102      	b.n	80037fc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2203      	movs	r2, #3
 80035fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	88fa      	ldrh	r2, [r7, #6]
 800360e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	88fa      	ldrh	r2, [r7, #6]
 8003614:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363c:	d10f      	bne.n	800365e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800365c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b40      	cmp	r3, #64	; 0x40
 800366a:	d007      	beq.n	800367c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800367a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003684:	d14b      	bne.n	800371e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_SPI_Transmit+0xf6>
 800368e:	8afb      	ldrh	r3, [r7, #22]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d13e      	bne.n	8003712 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	881a      	ldrh	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	1c9a      	adds	r2, r3, #2
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036b8:	e02b      	b.n	8003712 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d112      	bne.n	80036ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	881a      	ldrh	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	1c9a      	adds	r2, r3, #2
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80036ec:	e011      	b.n	8003712 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ee:	f7fe ffdd 	bl	80026ac <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d803      	bhi.n	8003706 <HAL_SPI_Transmit+0x168>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d102      	bne.n	800370c <HAL_SPI_Transmit+0x16e>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003710:	e074      	b.n	80037fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1ce      	bne.n	80036ba <HAL_SPI_Transmit+0x11c>
 800371c:	e04c      	b.n	80037b8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_SPI_Transmit+0x18e>
 8003726:	8afb      	ldrh	r3, [r7, #22]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d140      	bne.n	80037ae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	7812      	ldrb	r2, [r2, #0]
 8003738:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003752:	e02c      	b.n	80037ae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d113      	bne.n	800378a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	330c      	adds	r3, #12
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	86da      	strh	r2, [r3, #54]	; 0x36
 8003788:	e011      	b.n	80037ae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800378a:	f7fe ff8f 	bl	80026ac <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d803      	bhi.n	80037a2 <HAL_SPI_Transmit+0x204>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d102      	bne.n	80037a8 <HAL_SPI_Transmit+0x20a>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037ac:	e026      	b.n	80037fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1cd      	bne.n	8003754 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	6839      	ldr	r1, [r7, #0]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f8b3 	bl	8003928 <SPI_EndRxTxTransaction>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e000      	b.n	80037fc <HAL_SPI_Transmit+0x25e>
  }

error:
 80037fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800380c:	7ffb      	ldrb	r3, [r7, #31]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003828:	f7fe ff40 	bl	80026ac <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	4413      	add	r3, r2
 8003836:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003838:	f7fe ff38 	bl	80026ac <HAL_GetTick>
 800383c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	015b      	lsls	r3, r3, #5
 8003844:	0d1b      	lsrs	r3, r3, #20
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800384e:	e054      	b.n	80038fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d050      	beq.n	80038fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003858:	f7fe ff28 	bl	80026ac <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	429a      	cmp	r2, r3
 8003866:	d902      	bls.n	800386e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d13d      	bne.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800387c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003886:	d111      	bne.n	80038ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003890:	d004      	beq.n	800389c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389a:	d107      	bne.n	80038ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b4:	d10f      	bne.n	80038d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e017      	b.n	800391a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4013      	ands	r3, r2
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	429a      	cmp	r2, r3
 8003916:	d19b      	bne.n	8003850 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000000 	.word	0x20000000

08003928 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af02      	add	r7, sp, #8
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <SPI_EndRxTxTransaction+0x7c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <SPI_EndRxTxTransaction+0x80>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	0d5b      	lsrs	r3, r3, #21
 8003940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003944:	fb02 f303 	mul.w	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003952:	d112      	bne.n	800397a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2200      	movs	r2, #0
 800395c:	2180      	movs	r1, #128	; 0x80
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f7ff ff5a 	bl	8003818 <SPI_WaitFlagStateUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d016      	beq.n	8003998 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e00f      	b.n	800399a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	3b01      	subs	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d0f2      	beq.n	800397a <SPI_EndRxTxTransaction+0x52>
 8003994:	e000      	b.n	8003998 <SPI_EndRxTxTransaction+0x70>
        break;
 8003996:	bf00      	nop
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000000 	.word	0x20000000
 80039a8:	165e9f81 	.word	0x165e9f81

080039ac <__libc_init_array>:
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	4d0d      	ldr	r5, [pc, #52]	; (80039e4 <__libc_init_array+0x38>)
 80039b0:	4c0d      	ldr	r4, [pc, #52]	; (80039e8 <__libc_init_array+0x3c>)
 80039b2:	1b64      	subs	r4, r4, r5
 80039b4:	10a4      	asrs	r4, r4, #2
 80039b6:	2600      	movs	r6, #0
 80039b8:	42a6      	cmp	r6, r4
 80039ba:	d109      	bne.n	80039d0 <__libc_init_array+0x24>
 80039bc:	4d0b      	ldr	r5, [pc, #44]	; (80039ec <__libc_init_array+0x40>)
 80039be:	4c0c      	ldr	r4, [pc, #48]	; (80039f0 <__libc_init_array+0x44>)
 80039c0:	f000 f820 	bl	8003a04 <_init>
 80039c4:	1b64      	subs	r4, r4, r5
 80039c6:	10a4      	asrs	r4, r4, #2
 80039c8:	2600      	movs	r6, #0
 80039ca:	42a6      	cmp	r6, r4
 80039cc:	d105      	bne.n	80039da <__libc_init_array+0x2e>
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d4:	4798      	blx	r3
 80039d6:	3601      	adds	r6, #1
 80039d8:	e7ee      	b.n	80039b8 <__libc_init_array+0xc>
 80039da:	f855 3b04 	ldr.w	r3, [r5], #4
 80039de:	4798      	blx	r3
 80039e0:	3601      	adds	r6, #1
 80039e2:	e7f2      	b.n	80039ca <__libc_init_array+0x1e>
 80039e4:	08003aa8 	.word	0x08003aa8
 80039e8:	08003aa8 	.word	0x08003aa8
 80039ec:	08003aa8 	.word	0x08003aa8
 80039f0:	08003aac 	.word	0x08003aac

080039f4 <memset>:
 80039f4:	4402      	add	r2, r0
 80039f6:	4603      	mov	r3, r0
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d100      	bne.n	80039fe <memset+0xa>
 80039fc:	4770      	bx	lr
 80039fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003a02:	e7f9      	b.n	80039f8 <memset+0x4>

08003a04 <_init>:
 8003a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a06:	bf00      	nop
 8003a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a0a:	bc08      	pop	{r3}
 8003a0c:	469e      	mov	lr, r3
 8003a0e:	4770      	bx	lr

08003a10 <_fini>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	bf00      	nop
 8003a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a16:	bc08      	pop	{r3}
 8003a18:	469e      	mov	lr, r3
 8003a1a:	4770      	bx	lr
